diff --git a/src/packages/survey-form-renderer/src/components/SurveyForm.tsx b/src/packages/survey-form-renderer/src/components/SurveyForm.tsx
index 79e06f41f95e015f3162cc982549b46297eb8d0f..2d7bb993d9284304d17c7c45d1ea3a0cd3a398b7 100644
--- a/src/packages/survey-form-renderer/src/components/SurveyForm.tsx
+++ b/src/packages/survey-form-renderer/src/components/SurveyForm.tsx
@@ -1,75 +1,80 @@
 import React, { useState, useEffect } from 'react';
 import type { SurveyFormRendererProps } from '../types';
 import { SurveyFormProvider } from '../context/SurveyFormContext';
 import { PageByPageLayout } from './layouts/PageByPageLayout';
 import { FullPageSurveyLayout } from './layouts/FullPageSurveyLayout';
 import { ContinuousLayout } from './layouts/ContinuousLayout';
 import { AccordionLayout } from './layouts/AccordionLayout';
 import { TabsLayout } from './layouts/TabsLayout';
 import { StepperLayout } from './layouts/StepperLayout';
 import { themes } from '../themes';
 import { getThemeClass } from '../utils/surveyUtils';
+import { applyDynamicColors } from '../utils/colorUtils';
 
 export const SurveyForm: React.FC<SurveyFormRendererProps> = ({
   survey,
   onSubmit,
   onChange,
   onPageChange,
   defaultValues = {},
   language = 'en',
   theme = null,
   layout = 'stepper',
   progressBar = true,
   navigationButtons = {
     showPrevious: true,
     showNext: true,
     showSubmit: true,
     previousText: 'Previous',
     nextText: 'Next',
     submitText: 'Submit',
     position: 'bottom',
     align: 'center',
     style: 'default',
   },
   autoScroll = true,
   autoFocus = true,
   showSummary = false,
   submitText = 'Submit',
   enableDebug = false,
   logo = null,
   className = '',
 }) => {
   // Debug log - helps diagnose issues with the survey data
   if (enableDebug) {
     console.log('SurveyForm rendering with survey data:', survey?.rootNode?.type || 'No survey data');
   }
 
   // Get the selected theme
   // const themeConfig = theme ?? themes.default;
   const themeConfig = survey?.theme ?? themes.modern;
 
+  useEffect(() => {
+    applyDynamicColors(themeConfig);
+  }, [themeConfig]);
+
   // Enhanced container class with better mobile responsiveness
   const containerClass = getThemeClass(
     theme,
     `survey-form-container ${themeConfig.containerLayout} antialiased`,
     className
   );
 
   // Choose the correct layout based on the layout prop
   const renderLayout = (enableDebug: boolean) => {
     const layoutProps = {
       enableDebug,
       progressBar,
       navigationButtons,
       autoScroll,
       autoFocus,
       showSummary,
       submitText,
       logo
     };
 
     switch (layout) {
       case 'continuous':
         return <ContinuousLayout {...layoutProps} />;
       case 'accordion':
         return <AccordionLayout {...layoutProps} />;
diff --git a/src/packages/survey-form-renderer/src/index.tsx b/src/packages/survey-form-renderer/src/index.tsx
index c708d0b7c1c02f009d894dae08bd068d9b2b07ca..270a6d1a07864ece8dd138713ee192b435211009 100644
--- a/src/packages/survey-form-renderer/src/index.tsx
+++ b/src/packages/survey-form-renderer/src/index.tsx
@@ -30,50 +30,52 @@ import {
   evaluateCondition,
   evaluateSimpleCondition,
   isBlockVisible,
   executeCalculation,
   calculateBMI
 } from './utils/conditionalUtils';
 
 import {
   evaluateLogic,
   getSurveyPages,
   getSurveyPageIds,
   getLocalized,
   getThemeClass,
   formatFieldName
 } from './utils/surveyUtils';
 
 import {
   blockTypeMap,
   validateBlock,
   isContentBlock,
   isInputBlock,
   supportsConditionalRendering,
   supportsBranchingLogic
 } from './utils/blockAdapter';
 
+export { applyDynamicColors } from './utils/colorUtils';
+
 // Themes
 export {
   themes,
   defaultTheme,
   minimalTheme,
   colorfulTheme,
   modernTheme,
   corporateTheme,
   darkTheme
 } from './themes';
 
 // Types
 export * from './types';
 
 export {
   // Main components
   SurveyForm,
   SurveyFormProvider,
   useSurveyForm,
 
   // Block renderers
   BlockRenderer,
   TextInputRenderer,
   TextareaRenderer,
   RadioRenderer,
diff --git a/src/packages/survey-form-renderer/src/utils/colorUtils.ts b/src/packages/survey-form-renderer/src/utils/colorUtils.ts
new file mode 100644
index 0000000000000000000000000000000000000000..62e8be55927a52036569301f03bad3b3befd9059
--- /dev/null
+++ b/src/packages/survey-form-renderer/src/utils/colorUtils.ts
@@ -0,0 +1,77 @@
+export function hexToRgba(hex: string, alpha = 1): string {
+  const r = parseInt(hex.slice(1, 3), 16);
+  const g = parseInt(hex.slice(3, 5), 16);
+  const b = parseInt(hex.slice(5, 7), 16);
+  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
+}
+
+const VARIANT_PSEUDOS: Record<string, string> = {
+  hover: ':hover',
+  focus: ':focus',
+  active: ':active',
+  disabled: ':disabled',
+  'focus-visible': ':focus-visible',
+  checked: ':checked',
+};
+
+export function applyDynamicColors(theme: any) {
+  if (typeof document === 'undefined' || !theme) return;
+  const styleId = 'dynamic-color-styles';
+  let styleTag = document.getElementById(styleId) as HTMLStyleElement | null;
+  if (!styleTag) {
+    styleTag = document.createElement('style');
+    styleTag.id = styleId;
+    document.head.appendChild(styleTag);
+  }
+  const sheet = styleTag.sheet as CSSStyleSheet;
+  const existing = new Set<string>();
+  for (let i = 0; i < sheet.cssRules.length; i++) {
+    existing.add(sheet.cssRules[i].cssText);
+  }
+  const addRule = (selector: string, rule: string) => {
+    const text = `${selector}{${rule}}`;
+    if (!existing.has(text)) {
+      sheet.insertRule(text, sheet.cssRules.length);
+      existing.add(text);
+    }
+  };
+
+  const parseClasses = (classes: string) => {
+    classes.split(/\s+/).forEach((cls) => {
+      const match = cls.match(/^(?:([a-zA-Z-]+):)?(text|bg|border|ring|accent)-\[(#[0-9a-fA-F]{6})\](?:\/(\d{1,3}))?$/);
+      if (match) {
+        const variant = match[1];
+        const type = match[2];
+        const color = match[3];
+        const alpha = match[4] ? parseInt(match[4], 10) / 100 : 1;
+        const rgba = hexToRgba(color, alpha);
+        let selector = `.${cls.replace(/:/g, '\\:').replace(/\//g, '\\/')}`;
+        if (variant && VARIANT_PSEUDOS[variant]) {
+          selector += VARIANT_PSEUDOS[variant];
+        }
+        const prop =
+          type === 'text'
+            ? `color: ${rgba}`
+            : type === 'bg'
+            ? `background-color: ${rgba}`
+            : type === 'border'
+            ? `border-color: ${rgba}`
+            : type === 'ring'
+            ? `--tw-ring-color: ${rgba}`
+            : `accent-color: ${rgba}`;
+        addRule(selector, prop);
+      }
+    });
+  };
+
+  const traverse = (obj: any) => {
+    if (!obj) return;
+    if (typeof obj === 'string') {
+      parseClasses(obj);
+    } else if (typeof obj === 'object') {
+      Object.values(obj).forEach(traverse);
+    }
+  };
+
+  traverse(theme);
+}
