diff --git a/src/packages/survey-form-builder/src/components/blocks/BMICalculatorBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/BMICalculatorBlock.tsx
index 8b3bb57b19979978f645a24a61f5f53c47227bb5..5a2860fe63c6023e1d6f6b7e1f3ea15079a6c7dc 100644
--- a/src/packages/survey-form-builder/src/components/blocks/BMICalculatorBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/BMICalculatorBlock.tsx
@@ -1,32 +1,38 @@
 import React, { useState } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Textarea } from "@/components/ui/textarea";
 import { Label } from "@/components/ui/label";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
 import { Button } from "@/components/ui/button";
 import { Badge } from "@/components/ui/badge";
 import { Progress } from "@/components/ui/progress";
 import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
 import { Separator } from "@/components/ui/separator";
 import { Activity, Ruler, Weight, TrendingUp } from "lucide-react";
 import { Checkbox } from "@/components/ui/checkbox";
 
 // Form component for editing the block configuration
 const BMICalculatorForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const handleChange = (field: string, value: string | boolean) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   return (
     <div className="space-y-4">
       <div className="space-y-2">
         <Label htmlFor="label">Label</Label>
         <Input
@@ -41,231 +47,245 @@ const BMICalculatorForm: React.FC<ContentBlockItemProps> = ({
         <Label htmlFor="description">Description</Label>
         <Textarea
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="Calculate your Body Mass Index"
           rows={3}
         />
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="fieldName">Field Name</Label>
         <Input
           id="fieldName"
           value={data.fieldName || ""}
           onChange={(e) => handleChange("fieldName", e.target.value)}
           placeholder="bmiResult"
         />
         <p className="text-xs text-muted-foreground">
           The name of the field to store the BMI results
         </p>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="defaultUnit">Default Unit System</Label>
-        <Select value={data.defaultUnit || "metric"} onValueChange={(value) => handleChange("defaultUnit", value)}>
+        <Select
+          value={data.defaultUnit || "metric"}
+          onValueChange={(value) => handleChange("defaultUnit", value)}
+        >
           <SelectTrigger>
             <SelectValue placeholder="Select default unit system" />
           </SelectTrigger>
           <SelectContent>
             <SelectItem value="metric">Metric (cm, kg)</SelectItem>
             <SelectItem value="imperial">Imperial (ft/in, lbs)</SelectItem>
           </SelectContent>
         </Select>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="theme">Theme</Label>
-        <Select value={data.theme || "default"} onValueChange={(value) => handleChange("theme", value)}>
+        <Select
+          value={data.theme || "default"}
+          onValueChange={(value) => handleChange("theme", value)}
+        >
           <SelectTrigger>
             <SelectValue />
           </SelectTrigger>
           <SelectContent>
             <SelectItem value="default">Default</SelectItem>
             <SelectItem value="minimal">Minimal</SelectItem>
             <SelectItem value="gradient">Gradient</SelectItem>
           </SelectContent>
         </Select>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="className">CSS Class Names</Label>
         <Input
           id="className"
           value={data.className || ""}
           onChange={(e) => handleChange("className", e.target.value)}
           placeholder="custom-bmi-calculator"
         />
       </div>
       <div className="space-y-2">
-          <Checkbox
-            id="showResults"
-            checked={!!data.showResults}
-            onCheckedChange={(checked) => {
-              handleChange("showResults", !!checked);
-            }}
-          />
-          <Label htmlFor="showResults">Show results?</Label>
+        <Checkbox
+          id="showResults"
+          checked={!!data.showResults}
+          onCheckedChange={(checked) => {
+            handleChange("showResults", !!checked);
+          }}
+        />
+        <Label htmlFor="showResults">Show results?</Label>
       </div>
-
     </div>
   );
 };
 
 // Component to render the block in the survey
 const BMICalculatorItem: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const [unitSystem, setUnitSystem] = useState(data.defaultUnit || "metric");
   const [height, setHeight] = useState(unitSystem === "metric" ? 170 : 70); // 170cm or 70 inches
   const [weight, setWeight] = useState(unitSystem === "metric" ? 70 : 150); // 70kg or 150lbs
 
   // Convert height input for imperial (total inches)
   const getImperialHeight = () => {
     const feet = Math.floor(height / 12);
     const inches = height % 12;
     return { feet, inches };
   };
 
   const setImperialHeight = (feet: number, inches: number) => {
     setHeight(feet * 12 + inches);
   };
 
   // BMI calculation
   const calculateBMI = () => {
     let heightInMeters;
     let weightInKg = weight;
 
     if (unitSystem === "metric") {
       heightInMeters = height / 100; // Convert cm to meters
     } else {
       heightInMeters = height * 0.0254; // Convert inches to meters
       weightInKg = weight * 0.453592; // Convert lbs to kg
     }
 
     const bmi = weightInKg / (heightInMeters * heightInMeters);
     return bmi;
   };
 
   const getBMIData = (bmi: number) => {
-    if (bmi < 18.5) return { 
-      category: 'Underweight', 
-      color: 'from-blue-500 to-blue-600',
-      bgColor: 'bg-blue-50 border-blue-200',
-      textColor: 'text-blue-700',
-      progress: Math.min((bmi / 18.5) * 25, 25),
-      advice: 'Consider gaining weight through a balanced diet'
-    };
-    if (bmi < 25) return { 
-      category: 'Normal Weight', 
-      color: 'from-green-500 to-green-600',
-      bgColor: 'bg-green-50 border-green-200',
-      textColor: 'text-green-700',
-      progress: 25 + ((bmi - 18.5) / (25 - 18.5)) * 25,
-      advice: 'Great! Maintain your healthy lifestyle'
-    };
-    if (bmi < 30) return { 
-      category: 'Overweight', 
-      color: 'from-orange-500 to-orange-600',
-      bgColor: 'bg-orange-50 border-orange-200',
-      textColor: 'text-orange-700',
-      progress: 50 + ((bmi - 25) / (30 - 25)) * 25,
-      advice: 'Consider a balanced diet and regular exercise'
-    };
-    return { 
-      category: 'Obese', 
-      color: 'from-red-500 to-red-600',
-      bgColor: 'bg-red-50 border-red-200',
-      textColor: 'text-red-700',
+    if (bmi < 18.5)
+      return {
+        category: "Underweight",
+        color: "from-blue-500 to-blue-600",
+        bgColor: "bg-blue-50 border-blue-200",
+        textColor: "text-blue-700",
+        progress: Math.min((bmi / 18.5) * 25, 25),
+        advice: "Consider gaining weight through a balanced diet",
+      };
+    if (bmi < 25)
+      return {
+        category: "Normal Weight",
+        color: "from-green-500 to-green-600",
+        bgColor: "bg-green-50 border-green-200",
+        textColor: "text-green-700",
+        progress: 25 + ((bmi - 18.5) / (25 - 18.5)) * 25,
+        advice: "Great! Maintain your healthy lifestyle",
+      };
+    if (bmi < 30)
+      return {
+        category: "Overweight",
+        color: "from-orange-500 to-orange-600",
+        bgColor: "bg-orange-50 border-orange-200",
+        textColor: "text-orange-700",
+        progress: 50 + ((bmi - 25) / (30 - 25)) * 25,
+        advice: "Consider a balanced diet and regular exercise",
+      };
+    return {
+      category: "Obese",
+      color: "from-red-500 to-red-600",
+      bgColor: "bg-red-50 border-red-200",
+      textColor: "text-red-700",
       progress: Math.min(75 + ((bmi - 30) / 10) * 25, 100),
-      advice: 'Consult a healthcare professional for guidance'
+      advice: "Consult a healthcare professional for guidance",
     };
   };
 
   const bmi = calculateBMI();
   const bmiData = getBMIData(bmi);
   const imperialHeight = getImperialHeight();
 
   // Update form data when BMI changes
   React.useEffect(() => {
     if (data.fieldName && onUpdate) {
       onUpdate({
         ...data,
         [data.fieldName]: {
           bmi: parseFloat(bmi.toFixed(1)),
           category: bmiData.category,
           height: unitSystem === "metric" ? height : imperialHeight,
           weight: weight,
-          unitSystem: unitSystem
-        }
+          unitSystem: unitSystem,
+        },
       });
     }
   }, [height, weight, unitSystem, bmi, bmiData.category]);
 
   const theme = data.theme || "default";
 
   const getCardClassName = () => {
-    const base = `w-full max-w-2xl border-0 ${data.className || ''}`;
+    const base = `w-full max-w-2xl border-0 ${data.className || ""}`;
     switch (theme) {
       case "minimal":
         return `${base} shadow-none bg-transparent`;
       case "gradient":
         return `${base} bg-gradient-to-br from-background via-background to-accent/10 shadow-lg`;
       default:
         return `${base} shadow-md`;
     }
   };
 
   return (
     <Card className={getCardClassName()}>
       <CardHeader className="text-center pb-6">
         <CardTitle className="flex items-center justify-center gap-3 text-2xl">
           <div className={`p-2 rounded-full bg-gradient-to-r ${bmiData.color}`}>
             <Activity className="w-6 h-6 text-white" />
           </div>
-          {data.label || 'BMI Calculator'}
+          {data.label || "BMI Calculator"}
         </CardTitle>
         {data.description && (
-          <p className="text-muted-foreground max-w-md mx-auto">{data.description}</p>
+          <p className="text-muted-foreground max-w-md mx-auto">
+            {data.description}
+          </p>
         )}
       </CardHeader>
 
       <CardContent className="space-y-8">
         {/* Unit System Tabs */}
-        <Tabs value={unitSystem} onValueChange={(value) => {
-          setUnitSystem(value);
-          // Reset to reasonable defaults when switching units
-          if (value === "metric") {
-            setHeight(170);
-            setWeight(70);
-          } else {
-            setHeight(70); // 5'10" in inches
-            setWeight(150);
-          }
-        }} className="w-full">
+        <Tabs
+          value={unitSystem}
+          onValueChange={(value) => {
+            setUnitSystem(value);
+            // Reset to reasonable defaults when switching units
+            if (value === "metric") {
+              setHeight(170);
+              setWeight(70);
+            } else {
+              setHeight(70); // 5'10" in inches
+              setWeight(150);
+            }
+          }}
+          className="w-full"
+        >
           <TabsList className="grid w-full grid-cols-2 mb-6">
             <TabsTrigger value="metric" className="flex items-center gap-2">
               <Ruler className="w-4 h-4" />
               Metric
             </TabsTrigger>
             <TabsTrigger value="imperial" className="flex items-center gap-2">
               <Weight className="w-4 h-4" />
               Imperial
             </TabsTrigger>
           </TabsList>
 
           <TabsContent value="metric" className="space-y-6">
             <div className="grid grid-cols-2 gap-6">
               <div className="space-y-3">
                 <Label className="text-base font-medium flex items-center gap-2">
                   <Ruler className="w-4 h-4 text-muted-foreground" />
                   Height (cm)
                 </Label>
                 <div className="relative">
                   <Input
                     type="number"
                     value={height}
                     onChange={(e) => setHeight(parseInt(e.target.value) || 170)}
                     min={100}
                     max={250}
@@ -287,188 +307,205 @@ const BMICalculatorItem: React.FC<ContentBlockItemProps> = ({
                   <Input
                     type="number"
                     value={weight}
                     onChange={(e) => setWeight(parseInt(e.target.value) || 70)}
                     min={30}
                     max={300}
                     className="text-center text-xl font-semibold h-14"
                     placeholder="70"
                   />
                   <div className="absolute right-3 pl-2 top-1/2 -translate-y-1/2 text-sm text-muted-foreground">
                     kg
                   </div>
                 </div>
               </div>
             </div>
           </TabsContent>
 
           <TabsContent value="imperial" className="space-y-6">
             <div className="grid grid-cols-2 gap-6">
               <div className="space-y-3">
                 <Label className="text-base font-medium flex items-center gap-2">
                   <Ruler className="w-4 h-4 text-muted-foreground" />
                   Height
                 </Label>
                 <div className="flex gap-2">
-                  <Select 
-                    value={imperialHeight.feet.toString()} 
-                    onValueChange={(value) => setImperialHeight(parseInt(value), imperialHeight.inches)}
+                  <Select
+                    value={imperialHeight.feet.toString()}
+                    onValueChange={(value) =>
+                      setImperialHeight(parseInt(value), imperialHeight.inches)
+                    }
                   >
                     <SelectTrigger className="h-14">
                       <SelectValue />
                     </SelectTrigger>
                     <SelectContent>
-                      {[3, 4, 5, 6, 7, 8].map(ft => (
+                      {[3, 4, 5, 6, 7, 8].map((ft) => (
                         <SelectItem key={ft} value={ft.toString()}>
-                          {ft}' 
+                          {ft}'
                         </SelectItem>
                       ))}
                     </SelectContent>
                   </Select>
-                  <Select 
-                    value={imperialHeight.inches.toString()} 
-                    onValueChange={(value) => setImperialHeight(imperialHeight.feet, parseInt(value))}
+                  <Select
+                    value={imperialHeight.inches.toString()}
+                    onValueChange={(value) =>
+                      setImperialHeight(imperialHeight.feet, parseInt(value))
+                    }
                   >
                     <SelectTrigger className="h-14">
                       <SelectValue />
                     </SelectTrigger>
                     <SelectContent>
-                      {Array.from({length: 12}, (_, i) => (
+                      {Array.from({ length: 12 }, (_, i) => (
                         <SelectItem key={i} value={i.toString()}>
                           {i}"
                         </SelectItem>
                       ))}
                     </SelectContent>
                   </Select>
                 </div>
               </div>
 
               <div className="space-y-3">
                 <Label className="text-base font-medium flex items-center gap-2">
                   <Weight className="w-4 h-4 text-muted-foreground" />
                   Weight (lbs)
                 </Label>
                 <div className="relative">
                   <Input
                     type="number"
                     value={weight}
                     onChange={(e) => setWeight(parseInt(e.target.value) || 150)}
                     min={70}
                     max={660}
                     className="text-center text-xl font-semibold h-14"
                     placeholder="150"
                   />
                   <div className="absolute right-3 pl-2 top-1/2 -translate-y-1/2 text-sm text-muted-foreground">
                     lbs
                   </div>
                 </div>
               </div>
             </div>
           </TabsContent>
         </Tabs>
 
         <Separator />
 
         {/* BMI Result */}
-        {data.showResults ?
-        <div className={`space-y-6 p-6 rounded-xl border-2 ${bmiData.bgColor}`}>
-          <div className="text-center space-y-3">
-            <div className="flex items-center justify-center gap-2 mb-2">
-              <TrendingUp className="w-5 h-5 text-muted-foreground" />
-              <span className="text-sm font-medium text-muted-foreground uppercase tracking-wide">
-                Your BMI Score
-              </span>
-            </div>
-            
-            <div className="space-y-2">
-              <div className={`text-5xl font-bold bg-gradient-to-r ${bmiData.color} bg-clip-text text-transparent`}>
-                {bmi.toFixed(1)}
+        {data.showResults ? (
+          <div
+            className={`space-y-6 p-6 rounded-xl border-2 ${bmiData.bgColor}`}
+          >
+            <div className="text-center space-y-3">
+              <div className="flex items-center justify-center gap-2 mb-2">
+                <TrendingUp className="w-5 h-5 text-muted-foreground" />
+                <span className="text-sm font-medium text-muted-foreground uppercase tracking-wide">
+                  Your BMI Score
+                </span>
               </div>
-              <Badge variant="secondary" className={`px-4 py-1 text-sm font-medium ${bmiData.textColor} bg-white/80`}>
-                {bmiData.category}
-              </Badge>
-            </div>
-          </div>
 
-          {/* BMI Scale */}
-          <div className="space-y-3">
-            <div className="flex justify-between text-xs font-medium text-muted-foreground px-1">
-              <span>Underweight</span>
-              <span>Normal</span>
-              <span>Overweight</span>
-              <span>Obese</span>
-            </div>
-            <div className="relative">
-              <Progress value={bmiData.progress} className="h-3 bg-white/50" />
-              <div className="absolute top-0 left-0 h-3 w-full bg-gradient-to-r from-blue-400 via-green-400 via-orange-400 to-red-400 rounded-full opacity-20" />
+              <div className="space-y-2">
+                <div
+                  className={`text-5xl font-bold bg-gradient-to-r ${bmiData.color} bg-clip-text text-transparent`}
+                >
+                  {bmi.toFixed(1)}
+                </div>
+                <Badge
+                  variant="secondary"
+                  className={`px-4 py-1 text-sm font-medium ${bmiData.textColor} bg-white/80`}
+                >
+                  {bmiData.category}
+                </Badge>
+              </div>
             </div>
-            <div className="flex justify-between text-xs text-muted-foreground px-1">
-              <span>&lt;18.5</span>
-              <span>18.5-24.9</span>
-              <span>25-29.9</span>
-              <span>≥30</span>
+
+            {/* BMI Scale */}
+            <div className="space-y-3">
+              <div className="flex justify-between text-xs font-medium text-muted-foreground px-1">
+                <span>Underweight</span>
+                <span>Normal</span>
+                <span>Overweight</span>
+                <span>Obese</span>
+              </div>
+              <div className="relative">
+                <Progress
+                  value={bmiData.progress}
+                  className="h-3 bg-white/50"
+                />
+                <div className="absolute top-0 left-0 h-3 w-full bg-gradient-to-r from-blue-400 via-green-400 via-orange-400 to-red-400 rounded-full opacity-20" />
+              </div>
+              <div className="flex justify-between text-xs text-muted-foreground px-1">
+                <span>&lt;18.5</span>
+                <span>18.5-24.9</span>
+                <span>25-29.9</span>
+                <span>≥30</span>
+              </div>
             </div>
-          </div>
 
-          {/* Advice */}
-          <div className="text-center">
-            <p className={`text-sm font-medium ${bmiData.textColor}`}>
-              {bmiData.advice}
-            </p>
+            {/* Advice */}
+            <div className="text-center">
+              <p className={`text-sm font-medium ${bmiData.textColor}`}>
+                {bmiData.advice}
+              </p>
+            </div>
           </div>
-        </div>
-        : null }
+        ) : null}
       </CardContent>
     </Card>
   );
 };
 
 // Preview component shown in the block library
 const BMICalculatorPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-4">
       <div className="text-center space-y-3">
         <div className="flex items-center justify-center gap-2">
           <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-green-600">
             <Activity className="w-5 h-5 text-white" />
           </div>
           <span className="font-semibold">BMI Calculator</span>
         </div>
         <div className="space-y-1">
           <div className="text-3xl font-bold bg-gradient-to-r from-green-500 to-green-600 bg-clip-text text-transparent">
             23.5
           </div>
-          <Badge variant="secondary" className="text-xs">Normal Weight</Badge>
+          <Badge variant="secondary" className="text-xs">
+            Normal Weight
+          </Badge>
         </div>
         <div className="flex gap-2 justify-center text-xs text-muted-foreground">
           <span>Height • Weight • BMI</span>
         </div>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const BMICalculatorBlock: BlockDefinition = {
   type: "bmiCalculator",
   name: "BMI Calculator",
   description: "Modern BMI calculator with sleek design and intuitive controls",
   icon: <Activity className="w-4 h-4" />,
   defaultData: {
     type: "bmiCalculator",
     label: "BMI Calculator",
     description: "Calculate your Body Mass Index",
     fieldName: "bmiResult",
     defaultUnit: "metric",
     showResults: false,
     theme: "default",
     className: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <BMICalculatorItem {...props} />,
   renderFormFields: (props) => <BMICalculatorForm {...props} />,
   renderPreview: () => <BMICalculatorPreview />,
   validate: (data) => {
     if (!data.label) return "Label is required";
     if (!data.fieldName) return "Field name is required";
     return null;
   },
-};
\ No newline at end of file
+};
diff --git a/src/packages/survey-form-builder/src/components/blocks/CalculatedFieldBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/CalculatedFieldBlock.tsx
index 3287852c82392aa808ea09feab01aa589d45992f..fd319d281e97e0c0e1785b6f19c931831a23bb3d 100644
--- a/src/packages/survey-form-builder/src/components/blocks/CalculatedFieldBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/CalculatedFieldBlock.tsx
@@ -2,51 +2,54 @@ import React, { useState, useEffect } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Textarea } from "@/components/ui/textarea";
 import { Label } from "@/components/ui/label";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 import { Alert, AlertDescription } from "@/components/ui/alert";
 import { Badge } from "@/components/ui/badge";
 import { Separator } from "@/components/ui/separator";
 import { Calculator, CheckCircle, Info } from "lucide-react";
 
 // Form component for editing the block configuration
 const CalculatedFieldForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   // Handle field changes
   const handleChange = (field: string, value: string) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   // Handle dependencies array
   const handleDependenciesChange = (value: string) => {
-    const dependencies = value.split(',').map(dep => dep.trim()).filter(dep => dep.length > 0);
+    const dependencies = value
+      .split(",")
+      .map((dep) => dep.trim())
+      .filter((dep) => dep.length > 0);
     onUpdate?.({
       ...data,
       dependencies: dependencies,
     });
   };
 
   return (
     <div className="space-y-4">
       <div className="space-y-2">
         <Label htmlFor="label">Label</Label>
         <Input
           id="label"
           value={data.label || ""}
           onChange={(e) => handleChange("label", e.target.value)}
           placeholder="Calculated Result"
         />
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="description">Description</Label>
         <Textarea
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="This field is automatically calculated"
@@ -63,350 +66,374 @@ const CalculatedFieldForm: React.FC<ContentBlockItemProps> = ({
           placeholder="calculatedResult"
         />
         <p className="text-xs text-muted-foreground">
           The name of the field to store the calculated value
         </p>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="formula">Formula</Label>
         <Textarea
           id="formula"
           value={data.formula || ""}
           onChange={(e) => handleChange("formula", e.target.value)}
           placeholder={`// Simple calculation
 return fieldA + fieldB * 0.5;
 
 // Or complex logic
 if (!bmiCalculator) return "Please complete BMI calculation";
 const bmi = Number(bmiCalculator.bmi);
 if (bmi >= 30) return "High Risk";
 return "Low Risk";`}
           className="font-mono text-sm min-h-[120px]"
           rows={8}
         />
         <p className="text-xs text-muted-foreground">
-          Full JavaScript code block. Can return numbers, strings, or complex objects. Use field names as variables.
+          Full JavaScript code block. Can return numbers, strings, or complex
+          objects. Use field names as variables.
         </p>
         <div className="text-xs text-muted-foreground bg-muted p-3 rounded space-y-2">
           <strong>Examples:</strong>
           <div className="space-y-2">
             <div>
               <strong>Simple calculation:</strong>
-              <code className="block mt-1 p-2 bg-background rounded">return height * weight / 10000;</code>
+              <code className="block mt-1 p-2 bg-background rounded">
+                return height * weight / 10000;
+              </code>
             </div>
             <div>
               <strong>Conditional logic:</strong>
               <code className="block mt-1 p-2 bg-background rounded text-xs whitespace-pre">{`if (!income) return "No data";
 if (income > 100000) return "High earner";
 return "Standard";`}</code>
             </div>
             <div>
               <strong>Complex object access:</strong>
               <code className="block mt-1 p-2 bg-background rounded text-xs whitespace-pre">{`if (!bmiCalculator?.bmi) return "Incomplete";
 const bmi = bmiCalculator.bmi;
 return bmi > 25 ? "Overweight" : "Normal";`}</code>
             </div>
           </div>
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="dependencies">Dependencies</Label>
         <Input
           id="dependencies"
-          value={data.dependencies?.join(', ') || ""}
+          value={data.dependencies?.join(", ") || ""}
           onChange={(e) => handleDependenciesChange(e.target.value)}
           placeholder="fieldA, fieldB, fieldC"
         />
         <p className="text-xs text-muted-foreground">
           Comma-separated list of field names that this calculation depends on
         </p>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="note">Note</Label>
         <Input
           id="note"
           value={data.note || ""}
           onChange={(e) => handleChange("note", e.target.value)}
           placeholder="Based on your previous inputs"
         />
         <p className="text-xs text-muted-foreground">
           Optional note to display below the calculated value
         </p>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="displayFormat">Display Format</Label>
         <Input
           id="displayFormat"
           value={data.displayFormat || ""}
           onChange={(e) => handleChange("displayFormat", e.target.value)}
           placeholder="currency, percentage, decimal:2, or leave empty"
         />
         <p className="text-xs text-muted-foreground">
-          Optional formatting for numeric results: currency, percentage, decimal:X, or leave empty for raw output
+          Optional formatting for numeric results: currency, percentage,
+          decimal:X, or leave empty for raw output
         </p>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="resultType">Expected Result Type</Label>
         <Input
           id="resultType"
           value={data.resultType || ""}
           onChange={(e) => handleChange("resultType", e.target.value)}
           placeholder="number, string, object"
         />
         <p className="text-xs text-muted-foreground">
           Expected return type from the formula (for documentation purposes)
         </p>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="className">CSS Class Names</Label>
         <Input
           id="className"
           value={data.className || ""}
           onChange={(e) => handleChange("className", e.target.value)}
           placeholder="calculated-field custom-styles"
         />
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
 const CalculatedFieldItem: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
-  // Note: In a real survey runtime, this component would receive 
+  // Note: In a real survey runtime, this component would receive
   // calculated values from the survey engine that has access to all form data
-  const [displayValue, setDisplayValue] = useState<any>(data.calculatedValue || null);
+  const [displayValue, setDisplayValue] = useState<any>(
+    data.calculatedValue || null,
+  );
 
   // Format the calculated value - now supports any type
   const formatValue = (value: any): string => {
-    if (value === null || value === undefined) return '';
-    
+    if (value === null || value === undefined) return "";
+
     // If it's not a number, return as string
-    if (typeof value !== 'number') {
+    if (typeof value !== "number") {
       return String(value);
     }
 
     // Apply numeric formatting only for numbers
     if (!data.displayFormat) return value.toString();
 
     switch (data.displayFormat) {
-      case 'currency':
-        return new Intl.NumberFormat('en-US', {
-          style: 'currency',
-          currency: 'USD'
+      case "currency":
+        return new Intl.NumberFormat("en-US", {
+          style: "currency",
+          currency: "USD",
         }).format(value);
-      
-      case 'percentage':
+
+      case "percentage":
         return `${(value * 100).toFixed(1)}%`;
-      
+
       default:
-        if (data.displayFormat.startsWith('decimal:')) {
-          const decimals = parseInt(data.displayFormat.split(':')[1]) || 2;
+        if (data.displayFormat.startsWith("decimal:")) {
+          const decimals = parseInt(data.displayFormat.split(":")[1]) || 2;
           return value.toFixed(decimals);
         }
         return value.toString();
     }
   };
 
   // Update the stored calculated value when it changes
   useEffect(() => {
     if (displayValue !== null && data.fieldName && onUpdate) {
       onUpdate({
         ...data,
         calculatedValue: displayValue,
-        [data.fieldName]: displayValue
+        [data.fieldName]: displayValue,
       });
     }
   }, [displayValue, data.fieldName]);
 
   const getStatusIcon = () => {
-    if (displayValue !== null) return <CheckCircle className="w-4 h-4 text-green-500" />;
+    if (displayValue !== null)
+      return <CheckCircle className="w-4 h-4 text-green-500" />;
     return <Info className="w-4 h-4 text-muted-foreground" />;
   };
 
   const getStatusColor = () => {
     if (displayValue !== null) return "border-green-200 bg-green-50";
     return "border-blue-200 bg-blue-50";
   };
 
   return (
-    <Card className={`w-full ${data.className || ''}`}>
+    <Card className={`w-full ${data.className || ""}`}>
       <CardHeader className="pb-3">
         <CardTitle className="flex items-center gap-2 text-lg">
           <Calculator className="w-5 h-5 text-primary" />
-          {data.label || 'Calculated Field'}
+          {data.label || "Calculated Field"}
         </CardTitle>
         {data.description && (
           <p className="text-sm text-muted-foreground">{data.description}</p>
         )}
       </CardHeader>
 
       <CardContent className="space-y-4">
         {/* Formula Display */}
         {data.formula && (
           <div className="space-y-3">
             <div className="space-y-2">
               <Label className="text-sm font-medium">Formula:</Label>
               <div className="bg-muted rounded-lg p-3 border">
                 <pre className="text-xs font-mono text-muted-foreground whitespace-pre-wrap overflow-x-auto">
                   {data.formula}
                 </pre>
               </div>
             </div>
-            
+
             {data.dependencies && data.dependencies.length > 0 && (
               <div className="flex items-center gap-2 flex-wrap">
                 <Label className="text-sm font-medium">Depends on:</Label>
                 <div className="flex flex-wrap gap-1">
-                  {data.dependencies.map(dep => (
+                  {data.dependencies.map((dep) => (
                     <Badge key={dep} variant="secondary" className="text-xs">
                       {dep}
                     </Badge>
                   ))}
                 </div>
               </div>
             )}
 
             {data.resultType && (
               <div className="flex items-center gap-2">
                 <Label className="text-sm font-medium">Returns:</Label>
                 <Badge variant="outline" className="text-xs font-mono">
                   {data.resultType}
                 </Badge>
               </div>
             )}
           </div>
         )}
 
         <Separator />
 
         {/* Result Display */}
         <div className={`p-4 rounded-lg border-2 ${getStatusColor()}`}>
           <div className="flex items-center justify-between">
             <div className="space-y-1">
-              <p className="text-sm font-medium text-muted-foreground">Result</p>
+              <p className="text-sm font-medium text-muted-foreground">
+                Result
+              </p>
               {displayValue !== null ? (
                 <div className="space-y-1">
                   <p className="text-2xl font-bold text-green-700">
                     {formatValue(displayValue)}
                   </p>
-                  {typeof displayValue === 'object' && (
+                  {typeof displayValue === "object" && (
                     <p className="text-xs text-muted-foreground">
                       Object result - check console for full value
                     </p>
                   )}
                 </div>
               ) : (
                 <div className="space-y-2">
                   <p className="text-lg text-muted-foreground">
                     Will be calculated automatically
                   </p>
                   <div className="bg-blue-50 border border-blue-200 rounded p-2">
-                    <p className="text-xs text-blue-800 font-medium mb-1">Preview Formula:</p>
+                    <p className="text-xs text-blue-800 font-medium mb-1">
+                      Preview Formula:
+                    </p>
                     <pre className="text-xs text-blue-700 font-mono whitespace-pre-wrap">
-                      {data.formula ? data.formula.substring(0, 100) + (data.formula.length > 100 ? '...' : '') : 'Not configured'}
+                      {data.formula
+                        ? data.formula.substring(0, 100) +
+                          (data.formula.length > 100 ? "..." : "")
+                        : "Not configured"}
                     </pre>
                   </div>
                 </div>
               )}
             </div>
             {getStatusIcon()}
           </div>
         </div>
 
         {/* Note */}
         {data.note && (
           <div className="pt-2">
             <p className="text-sm text-muted-foreground">{data.note}</p>
           </div>
         )}
 
         {/* Configuration Info for Preview */}
         {!displayValue && data.dependencies && data.dependencies.length > 0 && (
           <Alert>
             <Info className="h-4 w-4" />
             <AlertDescription className="text-xs">
               <strong>This field will be calculated from:</strong>
               <br />
-              {data.dependencies.map(dep => (
-                <Badge key={dep} variant="outline" className="mr-1 mt-1 text-xs">
+              {data.dependencies.map((dep) => (
+                <Badge
+                  key={dep}
+                  variant="outline"
+                  className="mr-1 mt-1 text-xs"
+                >
                   {dep}
                 </Badge>
               ))}
               <br />
               <span className="text-muted-foreground">
-                The calculation will happen automatically when the survey is filled out.
+                The calculation will happen automatically when the survey is
+                filled out.
               </span>
             </AlertDescription>
           </Alert>
         )}
       </CardContent>
     </Card>
   );
 };
 
 // Preview component shown in the block library
 const CalculatedFieldPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-3">
       <div className="text-center space-y-2">
         <div className="flex items-center justify-center gap-2">
           <Calculator className="w-5 h-5 text-primary" />
           <span className="font-medium">Calculated Field</span>
         </div>
         <div className="space-y-1">
           <div className="bg-muted rounded px-2 py-1">
-            <code className="text-xs">if (bmi {">"} 25) return "High Risk"</code>
+            <code className="text-xs">
+              if (bmi {">"} 25) return "High Risk"
+            </code>
           </div>
           <div className="text-lg font-bold text-orange-600">High Risk</div>
         </div>
         <div className="text-xs text-muted-foreground">
           Complex formula results
         </div>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const CalculatedFieldBlock: BlockDefinition = {
   type: "calculatedField",
   name: "Calculated Field",
-  description: "Display a value calculated from a formula based on other fields",
+  description:
+    "Display a value calculated from a formula based on other fields",
   icon: <Calculator className="w-4 h-4" />,
   defaultData: {
     type: "calculatedField",
     label: "Calculated Result",
     description: "This field is automatically calculated using custom logic",
     fieldName: "calculatedResult",
     formula: `// Example: BMI risk assessment
 if (!bmiCalculator) return "Please complete BMI calculation";
 const bmi = Number(bmiCalculator.bmi);
 if (isNaN(bmi)) return "Invalid BMI value";
 if (bmi >= 30) return "High Risk";
 if (bmi >= 25) return "Moderate Risk";
 return "Low Risk";`,
     dependencies: ["bmiCalculator"],
     note: "Based on your BMI calculation",
     displayFormat: "",
     resultType: "string",
     className: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <CalculatedFieldItem {...props} />,
   renderFormFields: (props) => <CalculatedFieldForm {...props} />,
   renderPreview: () => <CalculatedFieldPreview />,
   validate: (data) => {
     if (!data.label) return "Label is required";
     if (!data.fieldName) return "Field name is required";
     if (!data.formula) return "Formula is required";
-    if (!data.dependencies || data.dependencies.length === 0) return "At least one dependency is required";
+    if (!data.dependencies || data.dependencies.length === 0)
+      return "At least one dependency is required";
     return null;
   },
-};
\ No newline at end of file
+};
diff --git a/src/packages/survey-form-builder/src/components/blocks/CheckboxBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/CheckboxBlock.tsx
index 7b173d213dd2895a1def22486073d3ad3243a420..e488bf20d29d04e4bb669f1ccdc653cc6d032002 100644
--- a/src/packages/survey-form-builder/src/components/blocks/CheckboxBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/CheckboxBlock.tsx
@@ -99,53 +99,51 @@ const CheckboxBlockForm: React.FC<ContentBlockItemProps> = ({
             <div className="space-y-2">
               <Label htmlFor="trueLabel">Yes Label</Label>
               <Input
                 id="trueLabel"
                 value={data.trueLabel || "Yes"}
                 onChange={(e) => handleChange("trueLabel", e.target.value)}
               />
             </div>
 
             <div className="space-y-2">
               <Label htmlFor="falseLabel">No Label</Label>
               <Input
                 id="falseLabel"
                 value={data.falseLabel || "No"}
                 onChange={(e) => handleChange("falseLabel", e.target.value)}
               />
             </div>
           </div>
         )}
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const CheckboxBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const CheckboxBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div className="space-y-2">
       <div className="flex items-center space-x-2">
         <Checkbox
           id={data.fieldName}
           name={data.fieldName}
           defaultChecked={!!data.defaultValue}
           value={data.value || "true"}
         />
         <Label htmlFor={data.fieldName}>{data.label}</Label>
       </div>
 
       {data.description && (
         <p className="text-sm text-muted-foreground ml-6">{data.description}</p>
       )}
 
       {data.showYesNo && (
         <div className="flex space-x-4 ml-6 text-sm text-muted-foreground">
           <span>Checked: {data.trueLabel || "Yes"}</span>
           <span>Unchecked: {data.falseLabel || "No"}</span>
         </div>
       )}
     </div>
   );
 };
@@ -156,35 +154,36 @@ const CheckboxBlockPreview: React.FC = () => {
     <div className="w-full flex items-center justify-center py-1">
       <div className="flex items-center space-x-2 w-4/5 max-w-full">
         <Checkbox id="preview-checkbox" disabled />
         <Label htmlFor="preview-checkbox">Checkbox option</Label>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const CheckboxBlock: BlockDefinition = {
   type: "checkbox",
   name: "Checkbox",
   description: "Single checkbox for binary/boolean options",
   icon: <CheckSquare className="w-4 h-4" />,
   defaultData: {
     type: "checkbox",
     fieldName: `checkbox${uuidv4().substring(0, 4)}`,
     label: "Check this option",
     description: "",
     value: "true",
     defaultValue: false,
     showYesNo: false,
     trueLabel: "Yes",
     falseLabel: "No",
+    isEndBlock: false,
   },
   renderItem: (props) => <CheckboxBlockItem {...props} />,
   renderFormFields: (props) => <CheckboxBlockForm {...props} />,
-  renderPreview: () => <CheckboxBlockPreview/>,
+  renderPreview: () => <CheckboxBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/ConditionalBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/ConditionalBlock.tsx
index 8a83189c5f6da4a6a0f5bc8c233326ba2a35a640..1472a4a0f55f41bd55d2d9886577452208caaf2f 100644
--- a/src/packages/survey-form-builder/src/components/blocks/ConditionalBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/ConditionalBlock.tsx
@@ -1,396 +1,440 @@
 import React, { useState } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Textarea } from "@/components/ui/textarea";
 import { Label } from "@/components/ui/label";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 import { Alert, AlertDescription } from "@/components/ui/alert";
 import { Badge } from "@/components/ui/badge";
 import { Button } from "@/components/ui/button";
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
 import { Separator } from "@/components/ui/separator";
 import { GitBranch, Eye, EyeOff, Code, Info, ChevronRight } from "lucide-react";
 
 // Form component for editing the block configuration
 const ConditionalBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const [showChildConfig, setShowChildConfig] = useState(false);
 
   const handleChange = (field: string, value: any) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   const handleChildBlockChange = (field: string, value: any) => {
     onUpdate?.({
       ...data,
       childBlock: {
         ...data.childBlock,
         [field]: value,
       },
     });
   };
 
   return (
     <div className="space-y-6">
       {/* Condition Configuration */}
       <div className="space-y-4">
         <div className="flex items-center gap-2">
           <GitBranch className="w-4 h-4 text-primary" />
           <Label className="text-base font-medium">Conditional Logic</Label>
         </div>
-        
+
         <div className="space-y-2">
           <Label htmlFor="condition">Condition</Label>
           <Textarea
             id="condition"
             value={data.condition || ""}
             onChange={(e) => handleChange("condition", e.target.value)}
             placeholder={`// Show this block when condition is true
 return age >= 18 && country === "US";
 
 // Or simple field comparison
 return fieldA === "Yes";`}
             className="font-mono text-sm min-h-[100px]"
             rows={5}
           />
           <p className="text-xs text-muted-foreground">
-            JavaScript expression that returns true/false. Use field names as variables.
+            JavaScript expression that returns true/false. Use field names as
+            variables.
           </p>
           <div className="text-xs text-muted-foreground bg-muted p-3 rounded space-y-2">
             <strong>Examples:</strong>
             <div className="space-y-1">
               <code className="block">return age {">"}= 18;</code>
-              <code className="block">return income {">"} 50000 && hasInsurance === true;</code>
-              <code className="block">return bmiCalculator?.category === "Overweight";</code>
-              <code className="block">return answers.includes("Option A");</code>
+              <code className="block">
+                return income {">"} 50000 && hasInsurance === true;
+              </code>
+              <code className="block">
+                return bmiCalculator?.category === "Overweight";
+              </code>
+              <code className="block">
+                return answers.includes("Option A");
+              </code>
             </div>
           </div>
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="dependencies">Dependencies</Label>
           <Input
             id="dependencies"
-            value={data.dependencies?.join(', ') || ""}
+            value={data.dependencies?.join(", ") || ""}
             onChange={(e) => {
-              const dependencies = e.target.value.split(',').map(dep => dep.trim()).filter(dep => dep.length > 0);
+              const dependencies = e.target.value
+                .split(",")
+                .map((dep) => dep.trim())
+                .filter((dep) => dep.length > 0);
               handleChange("dependencies", dependencies);
             }}
             placeholder="age, country, fieldA"
           />
           <p className="text-xs text-muted-foreground">
             Comma-separated list of field names this condition depends on
           </p>
         </div>
       </div>
 
       <Separator />
 
       {/* Child Block Configuration */}
       <div className="space-y-4">
         <div className="flex items-center justify-between">
           <div className="flex items-center gap-2">
             <Code className="w-4 h-4 text-primary" />
             <Label className="text-base font-medium">Child Block</Label>
           </div>
           <Button
             type="button"
             variant="outline"
             size="sm"
             onClick={() => setShowChildConfig(!showChildConfig)}
           >
-            {showChildConfig ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
+            {showChildConfig ? (
+              <EyeOff className="w-4 h-4" />
+            ) : (
+              <Eye className="w-4 h-4" />
+            )}
             {showChildConfig ? "Hide" : "Show"} Config
           </Button>
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="childBlockType">Block Type</Label>
-          <Select 
-            value={data.childBlock?.type || "text"} 
+          <Select
+            value={data.childBlock?.type || "text"}
             onValueChange={(value) => handleChildBlockChange("type", value)}
           >
             <SelectTrigger>
               <SelectValue placeholder="Select block type" />
             </SelectTrigger>
             <SelectContent>
               <SelectItem value="text">Text Input</SelectItem>
               <SelectItem value="textarea">Text Area</SelectItem>
               <SelectItem value="select">Select Dropdown</SelectItem>
               <SelectItem value="checkbox">Checkbox</SelectItem>
               <SelectItem value="radio">Radio Buttons</SelectItem>
               <SelectItem value="number">Number Input</SelectItem>
               <SelectItem value="date">Date Input</SelectItem>
               <SelectItem value="file">File Upload</SelectItem>
               <SelectItem value="html">HTML Content</SelectItem>
             </SelectContent>
           </Select>
         </div>
 
         {showChildConfig && (
           <div className="space-y-4 p-4 border rounded-lg bg-muted/20">
             <div className="space-y-2">
               <Label htmlFor="childLabel">Label</Label>
               <Input
                 id="childLabel"
                 value={data.childBlock?.label || ""}
-                onChange={(e) => handleChildBlockChange("label", e.target.value)}
+                onChange={(e) =>
+                  handleChildBlockChange("label", e.target.value)
+                }
                 placeholder="Enter label for the child block"
               />
             </div>
 
             <div className="space-y-2">
               <Label htmlFor="childFieldName">Field Name</Label>
               <Input
                 id="childFieldName"
                 value={data.childBlock?.fieldName || ""}
-                onChange={(e) => handleChildBlockChange("fieldName", e.target.value)}
+                onChange={(e) =>
+                  handleChildBlockChange("fieldName", e.target.value)
+                }
                 placeholder="conditionalField"
               />
             </div>
 
             <div className="space-y-2">
               <Label htmlFor="childDescription">Description</Label>
               <Textarea
                 id="childDescription"
                 value={data.childBlock?.description || ""}
-                onChange={(e) => handleChildBlockChange("description", e.target.value)}
+                onChange={(e) =>
+                  handleChildBlockChange("description", e.target.value)
+                }
                 placeholder="Optional description for the child block"
                 rows={2}
               />
             </div>
 
-            {(data.childBlock?.type === "text" || data.childBlock?.type === "textarea" || data.childBlock?.type === "number") && (
+            {(data.childBlock?.type === "text" ||
+              data.childBlock?.type === "textarea" ||
+              data.childBlock?.type === "number") && (
               <div className="space-y-2">
                 <Label htmlFor="childPlaceholder">Placeholder</Label>
                 <Input
                   id="childPlaceholder"
                   value={data.childBlock?.placeholder || ""}
-                  onChange={(e) => handleChildBlockChange("placeholder", e.target.value)}
+                  onChange={(e) =>
+                    handleChildBlockChange("placeholder", e.target.value)
+                  }
                   placeholder="Enter placeholder text"
                 />
               </div>
             )}
 
-            {(data.childBlock?.type === "select" || data.childBlock?.type === "radio" || data.childBlock?.type === "checkbox") && (
+            {(data.childBlock?.type === "select" ||
+              data.childBlock?.type === "radio" ||
+              data.childBlock?.type === "checkbox") && (
               <div className="space-y-2">
                 <Label htmlFor="childOptions">Options</Label>
                 <Textarea
                   id="childOptions"
-                  value={data.childBlock?.options?.join('\n') || ""}
+                  value={data.childBlock?.options?.join("\n") || ""}
                   onChange={(e) => {
-                    const options = e.target.value.split('\n').filter(opt => opt.trim().length > 0);
+                    const options = e.target.value
+                      .split("\n")
+                      .filter((opt) => opt.trim().length > 0);
                     handleChildBlockChange("options", options);
                   }}
                   placeholder="Option 1&#10;Option 2&#10;Option 3"
                   rows={3}
                 />
                 <p className="text-xs text-muted-foreground">
                   One option per line
                 </p>
               </div>
             )}
 
             {data.childBlock?.type === "html" && (
               <div className="space-y-2">
                 <Label htmlFor="childHtml">HTML Content</Label>
                 <Textarea
                   id="childHtml"
                   value={data.childBlock?.html || ""}
-                  onChange={(e) => handleChildBlockChange("html", e.target.value)}
+                  onChange={(e) =>
+                    handleChildBlockChange("html", e.target.value)
+                  }
                   placeholder="<p>Your HTML content here</p>"
                   className="font-mono text-sm"
                   rows={4}
                 />
               </div>
             )}
           </div>
         )}
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="className">CSS Class Names</Label>
         <Input
           id="className"
           value={data.className || ""}
           onChange={(e) => handleChange("className", e.target.value)}
           placeholder="conditional-block custom-styles"
         />
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
 const ConditionalBlockItem: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   // In a real survey, the survey engine would evaluate the condition
   // and only render this component if the condition is true
   const [isVisible] = useState(true); // Always show in preview mode
 
   if (!isVisible) {
     return null;
   }
 
   const renderChildBlock = () => {
     const childBlock = data.childBlock;
     if (!childBlock) return null;
 
     // This is a simplified renderer - in a real implementation,
     // you'd use the actual block renderers from your block registry
     switch (childBlock.type) {
       case "text":
       case "number":
         return (
           <div className="space-y-2">
             {childBlock.label && <Label>{childBlock.label}</Label>}
             {childBlock.description && (
-              <p className="text-sm text-muted-foreground">{childBlock.description}</p>
+              <p className="text-sm text-muted-foreground">
+                {childBlock.description}
+              </p>
             )}
             <Input
               type={childBlock.type}
               placeholder={childBlock.placeholder}
               onChange={(e) => {
                 if (onUpdate && childBlock.fieldName) {
                   onUpdate({
                     ...data,
-                    [childBlock.fieldName]: e.target.value
+                    [childBlock.fieldName]: e.target.value,
                   });
                 }
               }}
             />
           </div>
         );
 
       case "textarea":
         return (
           <div className="space-y-2">
             {childBlock.label && <Label>{childBlock.label}</Label>}
             {childBlock.description && (
-              <p className="text-sm text-muted-foreground">{childBlock.description}</p>
+              <p className="text-sm text-muted-foreground">
+                {childBlock.description}
+              </p>
             )}
             <Textarea
               placeholder={childBlock.placeholder}
               rows={3}
               onChange={(e) => {
                 if (onUpdate && childBlock.fieldName) {
                   onUpdate({
                     ...data,
-                    [childBlock.fieldName]: e.target.value
+                    [childBlock.fieldName]: e.target.value,
                   });
                 }
               }}
             />
           </div>
         );
 
       case "select":
         return (
           <div className="space-y-2">
             {childBlock.label && <Label>{childBlock.label}</Label>}
             {childBlock.description && (
-              <p className="text-sm text-muted-foreground">{childBlock.description}</p>
+              <p className="text-sm text-muted-foreground">
+                {childBlock.description}
+              </p>
             )}
-            <Select onValueChange={(value) => {
-              if (onUpdate && childBlock.fieldName) {
-                onUpdate({
-                  ...data,
-                  [childBlock.fieldName]: value
-                });
-              }
-            }}>
+            <Select
+              onValueChange={(value) => {
+                if (onUpdate && childBlock.fieldName) {
+                  onUpdate({
+                    ...data,
+                    [childBlock.fieldName]: value,
+                  });
+                }
+              }}
+            >
               <SelectTrigger>
                 <SelectValue placeholder="Select an option" />
               </SelectTrigger>
               <SelectContent>
                 {childBlock.options?.map((option, index) => (
                   <SelectItem key={index} value={option}>
                     {option}
                   </SelectItem>
                 ))}
               </SelectContent>
             </Select>
           </div>
         );
 
       case "html":
         return (
-          <div 
+          <div
             className="prose prose-sm max-w-none"
-            dangerouslySetInnerHTML={{ __html: childBlock.html || '' }}
+            dangerouslySetInnerHTML={{ __html: childBlock.html || "" }}
           />
         );
 
       default:
         return (
           <div className="p-4 border border-dashed rounded-lg text-center text-muted-foreground">
             <p className="text-sm">
               Child block type "{childBlock.type}" will render here
             </p>
           </div>
         );
     }
   };
 
   return (
-    <Card className={`w-full ${data.className || ''}`}>
+    <Card className={`w-full ${data.className || ""}`}>
       <CardHeader className="pb-3">
         <div className="flex items-center justify-between">
           <CardTitle className="flex items-center gap-2 text-lg">
             <GitBranch className="w-5 h-5 text-primary" />
             Conditional Content
           </CardTitle>
           <Badge variant="secondary" className="text-xs">
             Condition Met
           </Badge>
         </div>
       </CardHeader>
 
       <CardContent className="space-y-4">
         {/* Condition Display */}
         <Alert>
           <Info className="h-4 w-4" />
           <AlertDescription>
             <div className="space-y-2">
               <p className="text-sm font-medium">This content is shown when:</p>
               <div className="bg-muted rounded p-2">
                 <pre className="text-xs font-mono whitespace-pre-wrap">
-                  {data.condition || 'No condition specified'}
+                  {data.condition || "No condition specified"}
                 </pre>
               </div>
               {data.dependencies && data.dependencies.length > 0 && (
                 <div className="flex items-center gap-2 flex-wrap">
                   <span className="text-xs font-medium">Depends on:</span>
-                  {data.dependencies.map(dep => (
+                  {data.dependencies.map((dep) => (
                     <Badge key={dep} variant="outline" className="text-xs">
                       {dep}
                     </Badge>
                   ))}
                 </div>
               )}
             </div>
           </AlertDescription>
         </Alert>
 
         <Separator />
 
         {/* Child Block Content */}
         <div className="space-y-3">
           <div className="flex items-center gap-2">
             <ChevronRight className="w-4 h-4 text-muted-foreground" />
             <span className="text-sm font-medium text-muted-foreground">
               Conditional Content:
             </span>
           </div>
           <div className="pl-6 border-l-2 border-primary/20">
             {renderChildBlock()}
           </div>
         </div>
       </CardContent>
@@ -420,42 +464,43 @@ const ConditionalBlockPreview: React.FC = () => {
           <div className="text-xs text-muted-foreground">
             Shows content conditionally
           </div>
         </div>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const ConditionalBlock: BlockDefinition = {
   type: "conditional",
   name: "Conditional Block",
   description: "Display content only when specific conditions are met",
   icon: <GitBranch className="w-4 h-4" />,
   defaultData: {
     type: "conditional",
     condition: `// Show when age is 18 or older
 return age >= 18;`,
     dependencies: ["age"],
     childBlock: {
       type: "text",
       label: "Additional Information",
       fieldName: "additionalInfo",
       placeholder: "Enter additional information",
-      description: "This field appears when you're 18 or older"
+      description: "This field appears when you're 18 or older",
     },
     className: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <ConditionalBlockItem {...props} />,
   renderFormFields: (props) => <ConditionalBlockForm {...props} />,
   renderPreview: () => <ConditionalBlockPreview />,
   validate: (data) => {
     if (!data.condition) return "Condition is required";
     if (!data.childBlock) return "Child block configuration is required";
     if (!data.childBlock.type) return "Child block type is required";
     if (!data.dependencies || data.dependencies.length === 0) {
       return "At least one dependency field is required";
     }
     return null;
   },
-};
\ No newline at end of file
+};
diff --git a/src/packages/survey-form-builder/src/components/blocks/DatePickerBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/DatePickerBlock.tsx
index 543fedf2e91de2880b81f685009c61d2378c0552..8c3c5024d5f1ab4173978749de5d312ea021c94b 100644
--- a/src/packages/survey-form-builder/src/components/blocks/DatePickerBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/DatePickerBlock.tsx
@@ -1,89 +1,93 @@
 import React, { useState } from "react";
 import type { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Button } from "@/components/ui/button";
 import { Calendar, CalendarIcon } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 import { Calendar as CalendarComponent } from "@/components/ui/calendar";
-import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
+import {
+  Popover,
+  PopoverContent,
+  PopoverTrigger,
+} from "@/components/ui/popover";
 import { Switch } from "@/components/ui/switch";
 import { cn } from "@/lib/utils";
 
 // Simple date formatter function since we're not using date-fns
-const formatDate = (date: Date, format: string = 'PPP'): string => {
+const formatDate = (date: Date, format: string = "PPP"): string => {
   const options: Intl.DateTimeFormatOptions = {
-    year: 'numeric',
-    month: 'long',
-    day: 'numeric'
+    year: "numeric",
+    month: "long",
+    day: "numeric",
   };
 
-  if (format === 'PP') {
-    options.month = 'short';
-  } else if (format === 'P') {
-    options.month = 'numeric';
+  if (format === "PP") {
+    options.month = "short";
+  } else if (format === "P") {
+    options.month = "numeric";
   }
 
-  return date.toLocaleDateString('en-US', options);
+  return date.toLocaleDateString("en-US", options);
 };
 
 // Form component for editing the block configuration
 const DatePickerBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   // Handle field changes
   const handleChange = (field: string, value: string | boolean) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   const handleDateChange = (date: Date | undefined) => {
     if (date) {
       onUpdate?.({
         ...data,
         defaultValue: date.toISOString(),
       });
     } else {
       onUpdate?.({
         ...data,
         defaultValue: undefined,
       });
     }
   };
 
   // Create date from string value or undefined
   const defaultDate = data.defaultValue
     ? new Date(data.defaultValue as string)
     : undefined;
 
   // Format to display default date
   const formattedDate = defaultDate
-    ? formatDate(defaultDate, 'PPP')
+    ? formatDate(defaultDate, "PPP")
     : "No default date";
 
   return (
     <div className="space-y-4">
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="fieldName">Field Name</Label>
           <Input
             id="fieldName"
             value={data.fieldName || ""}
             onChange={(e) => handleChange("fieldName", e.target.value)}
             placeholder="dateField1"
           />
           <p className="text-xs text-muted-foreground">
             Unique identifier for storing responses
           </p>
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="label">Question Label</Label>
           <Input
             id="label"
             value={data.label || ""}
             onChange={(e) => handleChange("label", e.target.value)}
             placeholder="Your question here?"
@@ -112,55 +116,56 @@ const DatePickerBlockForm: React.FC<ContentBlockItemProps> = ({
             value={data.placeholder || ""}
             onChange={(e) => handleChange("placeholder", e.target.value)}
             placeholder="Select a date..."
           />
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="dateFormat">Date Format</Label>
           <Input
             id="dateFormat"
             value={data.dateFormat || ""}
             onChange={(e) => handleChange("dateFormat", e.target.value)}
             placeholder="PPP (e.g., April 29, 2025)"
           />
           <p className="text-xs text-muted-foreground">
             Format pattern: PPP, PP, or P
           </p>
         </div>
       </div>
 
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="defaultValue">Default Value</Label>
           <Popover>
             <PopoverTrigger>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="outline"
                 className={cn(
                   "w-full justify-start text-left font-normal",
-                  !defaultDate && "text-muted-foreground"
+                  !defaultDate && "text-muted-foreground",
                 )}
               >
                 <CalendarIcon className="mr-2 h-4 w-4" />
                 {formattedDate}
               </Button>
             </PopoverTrigger>
             <PopoverContent>
               <CalendarComponent
                 selected={defaultDate}
                 onSelect={handleDateChange}
               />
             </PopoverContent>
           </Popover>
         </div>
 
         <div className="space-y-2 pt-6">
           <div className="flex items-center space-x-2">
             <Switch
               id="showCalendarOnFocus"
               checked={data.showCalendarOnFocus === true}
               onCheckedChange={(checked) =>
                 handleChange("showCalendarOnFocus", checked)
               }
             />
             <Label htmlFor="showCalendarOnFocus">
@@ -187,156 +192,159 @@ const DatePickerBlockForm: React.FC<ContentBlockItemProps> = ({
             id="maxDate"
             type="date"
             value={data.maxDate || ""}
             onChange={(e) => handleChange("maxDate", e.target.value)}
           />
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="disabledDays">Disabled Days</Label>
           <Input
             id="disabledDays"
             placeholder="0,6 (Sun,Sat)"
             value={data.disabledDays || ""}
             onChange={(e) => handleChange("disabledDays", e.target.value)}
           />
           <p className="text-xs text-muted-foreground">
             Comma-separated days (0=Sun, 6=Sat)
           </p>
         </div>
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const DatePickerBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const DatePickerBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   const [date, setDate] = React.useState<Date | undefined>(
-    data.defaultValue ? new Date(data.defaultValue as string) : undefined
+    data.defaultValue ? new Date(data.defaultValue as string) : undefined,
   );
   const [isOpen, setIsOpen] = React.useState(false);
 
   // Format date according to specified format or default
   const formatSelectedDate = (date: Date) => {
     try {
       return formatDate(date, data.dateFormat || "PPP");
     } catch (e) {
       return formatDate(date, "PPP");
     }
   };
 
   // Parse disabled days
   const disabledDays = React.useMemo(() => {
     if (!data.disabledDays) return undefined;
 
     try {
-      return data.disabledDays.split(",").map((d: string) => parseInt(d.trim(), 10));
+      return data.disabledDays
+        .split(",")
+        .map((d: string) => parseInt(d.trim(), 10));
     } catch {
       return undefined;
     }
   }, [data.disabledDays]);
 
   // Create date range constraints
   const dateConstraints = React.useMemo(() => {
     const constraints: { from?: Date; to?: Date } = {};
 
     if (data.minDate) {
       try {
         constraints.from = new Date(data.minDate);
       } catch (e) {
         // Invalid date, ignore
       }
     }
 
     if (data.maxDate) {
       try {
         constraints.to = new Date(data.maxDate);
       } catch (e) {
         // Invalid date, ignore
       }
     }
 
     return constraints;
   }, [data.minDate, data.maxDate]);
 
   return (
     <div className="space-y-2">
-      {data.label && (
-        <Label htmlFor={data.fieldName}>{data.label}</Label>
-      )}
+      {data.label && <Label htmlFor={data.fieldName}>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <Popover>
         <PopoverTrigger>
-          <Button type="button"
+          <Button
+            type="button"
             id={data.fieldName}
             variant="outline"
             className={cn(
               "w-full justify-start text-left font-normal",
-              !date && "text-muted-foreground"
+              !date && "text-muted-foreground",
             )}
           >
             <CalendarIcon className="mr-2 h-4 w-4" />
-            {date ? formatSelectedDate(date) : data.placeholder || "Select a date"}
+            {date
+              ? formatSelectedDate(date)
+              : data.placeholder || "Select a date"}
           </Button>
         </PopoverTrigger>
         <PopoverContent>
           <CalendarComponent
             selected={date}
             onSelect={setDate}
             disabled={dateConstraints}
             disableWeekdays={disabledDays}
           />
         </PopoverContent>
       </Popover>
     </div>
   );
 };
 
 // Preview component shown in the block library
 const DatePickerBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
-      <Button type="button"
+      <Button
+        type="button"
         variant="outline"
         className="w-4/5 max-w-full justify-start text-left font-normal text-muted-foreground"
         disabled
       >
         <CalendarIcon className="mr-2 h-4 w-4" />
         Date picker
       </Button>
     </div>
   );
 };
 
 // Export the block definition
 export const DatePickerBlock: BlockDefinition = {
   type: "datepicker",
   name: "Date Picker",
   description: "Calendar component for selecting a date",
   icon: <Calendar className="w-4 h-4" />,
   defaultData: {
     type: "datepicker",
     fieldName: `date${uuidv4().substring(0, 4)}`,
     label: "Select a date",
     description: "",
     placeholder: "Pick a date",
     dateFormat: "PPP",
     showCalendarOnFocus: true,
     minDate: "",
     maxDate: "",
     disabledDays: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <DatePickerBlockItem {...props} />,
   renderFormFields: (props) => <DatePickerBlockForm {...props} />,
-  renderPreview: () => <DatePickerBlockPreview/>,
+  renderPreview: () => <DatePickerBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/FileUploadBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/FileUploadBlock.tsx
index 3c3fa7b6f260c3fac380c9d37618c14fc787b201..d59198ec8369aa5425ed12c847613dfd3adf4be8 100644
--- a/src/packages/survey-form-builder/src/components/blocks/FileUploadBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/FileUploadBlock.tsx
@@ -118,223 +118,225 @@ const FileUploadBlockForm: React.FC<ContentBlockItemProps> = ({
               checked={data.showPreview === true}
               onCheckedChange={(checked) =>
                 handleChange("showPreview", !!checked)
               }
             />
             <Label htmlFor="showPreview">Show previews for images</Label>
           </div>
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="helpText">Upload Instructions</Label>
         <Input
           id="helpText"
           value={data.helpText || ""}
           onChange={(e) => handleChange("helpText", e.target.value)}
           placeholder="Drag and drop files here or click to browse"
         />
       </div>
 
       <div className="space-y-2 pt-1">
         <div className="flex items-center space-x-2">
           <Checkbox
             id="required"
             checked={data.required === true}
-            onCheckedChange={(checked) =>
-              handleChange("required", !!checked)
-            }
+            onCheckedChange={(checked) => handleChange("required", !!checked)}
           />
           <Label htmlFor="required">Required</Label>
         </div>
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const FileUploadBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const FileUploadBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   const fileInputRef = React.useRef<HTMLInputElement>(null);
   const [files, setFiles] = React.useState<File[]>([]);
   const [isDragging, setIsDragging] = React.useState(false);
 
   // Handle file selection
   const handleFileSelect = (selectedFiles: FileList | null) => {
     if (!selectedFiles) return;
 
     const maxFiles = parseInt(String(data.maxFiles || "1"), 10);
-    const maxFileSize = parseFloat(String(data.maxFileSize || "5")) * 1024 * 1024; // Convert MB to bytes
-    const acceptedTypes = data.acceptedFileTypes as string[] || [];
+    const maxFileSize =
+      parseFloat(String(data.maxFileSize || "5")) * 1024 * 1024; // Convert MB to bytes
+    const acceptedTypes = (data.acceptedFileTypes as string[]) || [];
 
     // Filter files based on accepted types and size
     const validFiles: File[] = [];
 
     for (let i = 0; i < selectedFiles.length; i++) {
       const file = selectedFiles[i];
-      const fileExt = `.${file.name.split('.').pop()?.toLowerCase()}`;
+      const fileExt = `.${file.name.split(".").pop()?.toLowerCase()}`;
 
-      const isValidType = acceptedTypes.length === 0 || acceptedTypes.includes(fileExt);
+      const isValidType =
+        acceptedTypes.length === 0 || acceptedTypes.includes(fileExt);
       const isValidSize = file.size <= maxFileSize;
 
       if (isValidType && isValidSize) {
         validFiles.push(file);
       }
     }
 
     // Respect maximum files limit
     const newFiles = [...files, ...validFiles].slice(0, maxFiles);
     setFiles(newFiles);
   };
 
   // Handle file removal
   const handleRemoveFile = (index: number) => {
     setFiles(files.filter((_, i) => i !== index));
   };
 
   // Handle drag events
   const handleDragOver = (e: React.DragEvent) => {
     e.preventDefault();
     setIsDragging(true);
   };
 
   const handleDragLeave = () => {
     setIsDragging(false);
   };
 
   const handleDrop = (e: React.DragEvent) => {
     e.preventDefault();
     setIsDragging(false);
     handleFileSelect(e.dataTransfer.files);
   };
 
   // Create file previews
   const renderFilePreviews = () => {
     return files.map((file, index) => {
-      const isImage = file.type.startsWith('image/');
+      const isImage = file.type.startsWith("image/");
       const showPreview = data.showPreview && isImage;
 
       return (
         <div
           key={index}
           className="flex items-center gap-2 p-2 rounded-md border bg-card mt-2"
         >
           {showPreview && (
             <div className="w-10 h-10 flex-shrink-0 rounded overflow-hidden">
               <img
                 src={URL.createObjectURL(file)}
                 alt={file.name}
                 className="w-full h-full object-cover"
               />
             </div>
           )}
 
           <div className="flex-grow truncate">
             <p className="text-sm font-medium truncate">{file.name}</p>
             <p className="text-xs text-muted-foreground">
               {(file.size / 1024).toFixed(1)} KB
             </p>
           </div>
 
-          <Button type="button"
+          <Button
+            type="button"
             variant="ghost"
             size="icon"
             onClick={() => handleRemoveFile(index)}
             className="flex-shrink-0"
           >
             <X className="h-4 w-4" />
           </Button>
         </div>
       );
     });
   };
 
   return (
     <div className="space-y-2">
-      {data.label && (
-        <Label htmlFor={data.fieldName}>{data.label}</Label>
-      )}
+      {data.label && <Label htmlFor={data.fieldName}>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <div
         className={`border-2 border-dashed rounded-md p-6 text-center cursor-pointer transition-colors ${
-          isDragging ? "border-primary bg-primary/5" : "border-muted-foreground/20"
+          isDragging
+            ? "border-primary bg-primary/5"
+            : "border-muted-foreground/20"
         }`}
         onDragOver={handleDragOver}
         onDragLeave={handleDragLeave}
         onDrop={handleDrop}
         onClick={() => fileInputRef.current?.click()}
       >
         <FileUp className="mx-auto h-10 w-10 text-muted-foreground mb-2" />
         <p className="text-sm font-medium mb-1">
           {data.helpText || "Drag and drop files here or click to browse"}
         </p>
 
         <p className="text-xs text-muted-foreground">
           {data.acceptedFileTypes && data.acceptedFileTypes.length > 0
             ? `Accepted formats: ${(data.acceptedFileTypes as string[]).join(", ")}`
             : "All file formats accepted"}
           {data.maxFileSize && ` • Max size: ${data.maxFileSize} MB`}
-          {data.maxFiles && parseInt(String(data.maxFiles), 10) > 1 && ` • Max files: ${data.maxFiles}`}
+          {data.maxFiles &&
+            parseInt(String(data.maxFiles), 10) > 1 &&
+            ` • Max files: ${data.maxFiles}`}
         </p>
 
         <input
           ref={fileInputRef}
           id={data.fieldName}
           type="file"
           className="hidden"
           accept={(data.acceptedFileTypes as string[])?.join(",") || undefined}
           multiple={parseInt(String(data.maxFiles || "1"), 10) > 1}
           onChange={(e) => handleFileSelect(e.target.files)}
         />
       </div>
 
       {files.length > 0 && (
         <div className="mt-4 space-y-1">{renderFilePreviews()}</div>
       )}
     </div>
   );
 };
 
 // Preview component shown in the block library
 const FileUploadBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <div className="flex items-center border rounded px-3 py-2 w-4/5 max-w-full text-muted-foreground">
         <Upload className="w-4 h-4 mr-2" />
         <span className="text-sm">File upload</span>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const FileUploadBlock: BlockDefinition = {
   type: "fileupload",
   name: "File Upload",
   description: "Component for uploading files",
   icon: <Upload className="w-4 h-4" />,
   defaultData: {
     type: "fileupload",
     fieldName: `file${uuidv4().substring(0, 4)}`,
     label: "Upload files",
     description: "",
     acceptedFileTypes: [".jpg", ".jpeg", ".png", ".pdf"],
     maxFileSize: "5",
     maxFiles: "1",
     helpText: "Drag and drop files here or click to browse",
     showPreview: true,
     required: false,
+    isEndBlock: false,
   },
   renderItem: (props) => <FileUploadBlockItem {...props} />,
   renderFormFields: (props) => <FileUploadBlockForm {...props} />,
-  renderPreview: () => <FileUploadBlockPreview/>,
+  renderPreview: () => <FileUploadBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/HtmlBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/HtmlBlock.tsx
index 6f498789fc12fb3924f5d7bcfa2c99aff0eedf9d..d62bf9ca0766b36ed7fdb427bd35f7944ab19b4c 100644
--- a/src/packages/survey-form-builder/src/components/blocks/HtmlBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/HtmlBlock.tsx
@@ -1,38 +1,35 @@
 import React, { useState } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Textarea } from "@/components/ui/textarea";
 import { Label } from "@/components/ui/label";
 import { Code } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 
 // Form component for editing the block configuration
-const HtmlBlockForm: React.FC<ContentBlockItemProps> = ({
-  data,
-  onUpdate,
-}) => {
+const HtmlBlockForm: React.FC<ContentBlockItemProps> = ({ data, onUpdate }) => {
   // Handle field changes
   const handleChange = (field: string, value: string) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   const [preview, setPreview] = useState(false);
 
   return (
     <div className="space-y-4">
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="variableName">Variable Name (Optional)</Label>
           <Input
             id="variableName"
             value={data.variableName || ""}
             onChange={(e) => handleChange("variableName", e.target.value)}
             placeholder="htmlVar"
           />
           <p className="text-xs text-muted-foreground">
             Optional variable to use in templates
           </p>
         </div>
@@ -41,86 +38,87 @@ const HtmlBlockForm: React.FC<ContentBlockItemProps> = ({
           <Label htmlFor="className">CSS Class Names</Label>
           <Input
             id="className"
             value={data.className || ""}
             onChange={(e) => handleChange("className", e.target.value)}
             placeholder="html-content custom-styles"
           />
         </div>
       </div>
 
       <div className="space-y-2">
         <div className="flex items-center justify-between">
           <Label htmlFor="html">HTML Content</Label>
           <button
             type="button"
             className="text-xs text-primary hover:underline"
             onClick={() => setPreview(!preview)}
           >
             {preview ? "Edit HTML" : "Preview"}
           </button>
         </div>
 
         {preview ? (
           <div
             className="border rounded-md p-4 min-h-[200px] overflow-auto"
-            dangerouslySetInnerHTML={{ __html: data.html || '' }}
+            dangerouslySetInnerHTML={{ __html: data.html || "" }}
           />
         ) : (
           <Textarea
             id="html"
             value={data.html || ""}
             onChange={(e) => handleChange("html", e.target.value)}
             placeholder="<h2>HTML Content</h2>\n<p>You can add any HTML here</p>"
             rows={10}
             className="font-mono text-sm"
           />
         )}
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const HtmlBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const HtmlBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div
-      className={data.className || ''}
-      dangerouslySetInnerHTML={{ __html: data.html || '' }}
+      className={data.className || ""}
+      dangerouslySetInnerHTML={{ __html: data.html || "" }}
     />
   );
 };
 
 // Preview component shown in the block library
 const HtmlBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <div className="text-center w-4/5 max-w-full text-sm">
         <span className="text-muted-foreground">HTML</span>
-        <code className="px-2 py-1 bg-muted rounded-md text-xs">&lt;div&gt;&lt;/div&gt;</code>
+        <code className="px-2 py-1 bg-muted rounded-md text-xs">
+          &lt;div&gt;&lt;/div&gt;
+        </code>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const HtmlBlock: BlockDefinition = {
   type: "html",
   name: "HTML",
   description: "Custom HTML content",
   icon: <Code className="w-4 h-4" />,
   defaultData: {
     type: "html",
     html: "<h2>HTML Content</h2>\n<p>This is a <strong>custom</strong> HTML block.</p>",
     variableName: "",
     className: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <HtmlBlockItem {...props} />,
   renderFormFields: (props) => <HtmlBlockForm {...props} />,
-  renderPreview: () => <HtmlBlockPreview/>,
+  renderPreview: () => <HtmlBlockPreview />,
   validate: (data) => {
     if (!data.html) return "HTML content is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/MarkdownBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/MarkdownBlock.tsx
index e85e706e3156cfc80ef004602aaed14f97abce12..8aebc16cd6fb47a7b4c6e622a137b8aabbc58117 100644
--- a/src/packages/survey-form-builder/src/components/blocks/MarkdownBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/MarkdownBlock.tsx
@@ -1,61 +1,61 @@
 import React, { useState } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Textarea } from "@/components/ui/textarea";
 import { Label } from "@/components/ui/label";
 import { Checkbox } from "@/components/ui/checkbox";
 import { FileText } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 
 // A simple markdown renderer (in a real app, you'd use a proper markdown library)
 const renderMarkdown = (text: string): string => {
   // This is a very basic implementation - in a real app, use a markdown library
   let html = text
     // Headers
-    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
-    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
-    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
+    .replace(/^### (.*$)/gim, "<h3>$1</h3>")
+    .replace(/^## (.*$)/gim, "<h2>$1</h2>")
+    .replace(/^# (.*$)/gim, "<h1>$1</h1>")
     // Bold
-    .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
+    .replace(/\*\*(.*)\*\*/gim, "<strong>$1</strong>")
     // Italic
-    .replace(/\*(.*)\*/gim, '<em>$1</em>')
+    .replace(/\*(.*)\*/gim, "<em>$1</em>")
     // Links
     .replace(/\[([^\]]+)\]\(([^)]+)\)/gim, '<a href="$2">$1</a>')
     // Lists
-    .replace(/^\s*\n\*/gim, '<ul>\n*')
-    .replace(/^(\*.+)\s*\n([^\*])/gim, '$1\n</ul>\n\n$2')
-    .replace(/^\*(.+)/gim, '<li>$1</li>')
+    .replace(/^\s*\n\*/gim, "<ul>\n*")
+    .replace(/^(\*.+)\s*\n([^\*])/gim, "$1\n</ul>\n\n$2")
+    .replace(/^\*(.+)/gim, "<li>$1</li>")
     // Paragraphs
-    .replace(/^\s*\n\s*\n/gim, '</p><p>');
+    .replace(/^\s*\n\s*\n/gim, "</p><p>");
 
   // Wrap with paragraph tags
-  if (!html.startsWith('<h') && !html.startsWith('<ul')) {
-    html = '<p>' + html;
+  if (!html.startsWith("<h") && !html.startsWith("<ul")) {
+    html = "<p>" + html;
   }
-  if (!html.endsWith('</p>') && !html.endsWith('</ul>')) {
-    html = html + '</p>';
+  if (!html.endsWith("</p>") && !html.endsWith("</ul>")) {
+    html = html + "</p>";
   }
 
   return html;
 };
 
 // Form component for editing the block configuration
 const MarkdownBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   // Handle field changes
   const handleChange = (field: string, value: string | boolean) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   const [preview, setPreview] = useState(false);
 
   return (
     <div className="space-y-4">
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="variableName">Variable Name (Optional)</Label>
@@ -67,105 +67,110 @@ const MarkdownBlockForm: React.FC<ContentBlockItemProps> = ({
           />
           <p className="text-xs text-muted-foreground">
             Optional variable to use in templates
           </p>
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="className">CSS Class Names</Label>
           <Input
             id="className"
             value={data.className || ""}
             onChange={(e) => handleChange("className", e.target.value)}
             placeholder="markdown-content"
           />
         </div>
       </div>
 
       <div className="flex items-center space-x-2 mb-2">
         <Checkbox
           id="updateContent"
           checked={!!data.updateContent}
           onCheckedChange={(checked) => {
             handleChange("updateContent", !!checked);
           }}
         />
-        <Label htmlFor="updateContent">Auto-update content from variables</Label>
+        <Label htmlFor="updateContent">
+          Auto-update content from variables
+        </Label>
       </div>
 
       <div className="space-y-2">
         <div className="flex items-center justify-between">
           <Label htmlFor="text">Markdown Content</Label>
           <button
             type="button"
             className="text-xs text-primary hover:underline"
             onClick={() => setPreview(!preview)}
           >
             {preview ? "Edit Markdown" : "Preview"}
           </button>
         </div>
 
         {preview ? (
           <div
             className="border rounded-md p-4 min-h-[200px] prose prose-sm max-w-none"
-            dangerouslySetInnerHTML={{ __html: renderMarkdown(data.text || '') }}
+            dangerouslySetInnerHTML={{
+              __html: renderMarkdown(data.text || ""),
+            }}
           />
         ) : (
           <Textarea
             id="text"
             value={data.text || ""}
             onChange={(e) => handleChange("text", e.target.value)}
             placeholder="# Markdown content\n\nYou can use **bold** and *italic* text"
             rows={10}
             className="font-mono text-sm"
           />
         )}
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const MarkdownBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const MarkdownBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div
-      className={`prose prose-sm max-w-none ${data.className || ''}`}
-      dangerouslySetInnerHTML={{ __html: renderMarkdown(data.text || '') }}
+      className={`prose prose-sm max-w-none ${data.className || ""}`}
+      dangerouslySetInnerHTML={{ __html: renderMarkdown(data.text || "") }}
     />
   );
 };
 
 // Preview component shown in the block library
 const MarkdownBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <div className="text-center w-4/5 max-w-full text-sm">
         <span className="text-muted-foreground">Markdown</span>
-        <code className="px-2 py-1 bg-muted rounded-md text-xs">## Heading</code>
+        <code className="px-2 py-1 bg-muted rounded-md text-xs">
+          ## Heading
+        </code>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const MarkdownBlock: BlockDefinition = {
   type: "markdown",
   name: "Markdown",
   description: "Formatted text content using Markdown syntax",
   icon: <FileText className="w-4 h-4" />,
   defaultData: {
     type: "markdown",
     text: "## Markdown Heading\n\nThis is a paragraph with **bold** and *italic* text.\n\n* List item 1\n* List item 2",
     variableName: "",
     className: "",
     updateContent: false,
+    isEndBlock: false,
   },
   renderItem: (props) => <MarkdownBlockItem {...props} />,
   renderFormFields: (props) => <MarkdownBlockForm {...props} />,
-  renderPreview: () => <MarkdownBlockPreview/>,
+  renderPreview: () => <MarkdownBlockPreview />,
   validate: (data) => {
     if (!data.text) return "Content is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/MatrixBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/MatrixBlock.tsx
index 7d23c0b81c34b30b880d7937d4b889b681eb6659..3db53a4f03abc0f92905a28593ee6a20a9148a83 100644
--- a/src/packages/survey-form-builder/src/components/blocks/MatrixBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/MatrixBlock.tsx
@@ -1,127 +1,141 @@
 import React, { useState } from "react";
 import type { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Button } from "@/components/ui/button";
 import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
-import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
+import {
+  Table,
+  TableBody,
+  TableCell,
+  TableHead,
+  TableHeader,
+  TableRow,
+} from "@/components/ui/table";
 import { CirclePlus, CircleX, Grid3X3 } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 
 interface MatrixQuestion {
   id: string;
   text: string;
 }
 
 interface MatrixOption {
   id: string;
   text: string;
   value: string;
 }
 
 // Form component for editing the block configuration
 const MatrixBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const [newQuestionText, setNewQuestionText] = useState("");
   const [newOptionText, setNewOptionText] = useState("");
   const [newOptionValue, setNewOptionValue] = useState("");
 
   // Extract matrix data from block data
   const questions: MatrixQuestion[] = data.questions || [];
   const options: MatrixOption[] = data.options || [];
 
   // Handle field changes
-  const handleChange = (field: string, value: string | MatrixQuestion[] | MatrixOption[]) => {
+  const handleChange = (
+    field: string,
+    value: string | MatrixQuestion[] | MatrixOption[],
+  ) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   // Handle adding a new row (question)
   const handleAddQuestion = () => {
     if (!newQuestionText.trim()) return;
 
     const newQuestions = [
       ...questions,
       {
         id: uuidv4(),
         text: newQuestionText,
-      }
+      },
     ];
 
     handleChange("questions", newQuestions);
     setNewQuestionText("");
   };
 
   // Handle removing a question
   const handleRemoveQuestion = (index: number) => {
     const newQuestions = [...questions];
     newQuestions.splice(index, 1);
     handleChange("questions", newQuestions);
   };
 
   // Handle updating a question
   const handleUpdateQuestion = (index: number, text: string) => {
     const newQuestions = [...questions];
     newQuestions[index] = {
       ...newQuestions[index],
       text,
     };
     handleChange("questions", newQuestions);
   };
 
   // Handle adding a new column (option)
   const handleAddOption = () => {
     if (!newOptionText.trim()) return;
 
     const newOptions = [
       ...options,
       {
         id: uuidv4(),
         text: newOptionText,
         value: newOptionValue || newOptionText,
-      }
+      },
     ];
 
     handleChange("options", newOptions);
     setNewOptionText("");
     setNewOptionValue("");
   };
 
   // Handle removing an option
   const handleRemoveOption = (index: number) => {
     const newOptions = [...options];
     newOptions.splice(index, 1);
     handleChange("options", newOptions);
   };
 
   // Handle updating an option
-  const handleUpdateOption = (index: number, field: "text" | "value", value: string) => {
+  const handleUpdateOption = (
+    index: number,
+    field: "text" | "value",
+    value: string,
+  ) => {
     const newOptions = [...options];
     newOptions[index] = {
       ...newOptions[index],
       [field]: value,
     };
     handleChange("options", newOptions);
   };
 
   return (
     <div className="space-y-4">
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="fieldName">Field Name</Label>
           <Input
             id="fieldName"
             value={data.fieldName || ""}
             onChange={(e) => handleChange("fieldName", e.target.value)}
             placeholder="matrixField1"
           />
           <p className="text-xs text-muted-foreground">
             Unique identifier for storing responses
           </p>
         </div>
 
         <div className="space-y-2">
@@ -133,262 +147,274 @@ const MatrixBlockForm: React.FC<ContentBlockItemProps> = ({
             placeholder="Rate the following items"
           />
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="description">Description/Help Text</Label>
         <Input
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="Additional information about this question"
         />
       </div>
 
       {/* Rows (questions) section */}
       <div className="space-y-2 border rounded-md p-4">
         <div className="flex justify-between items-center">
           <Label>Rows (Questions)</Label>
         </div>
 
         <div className="space-y-3">
           {questions.map((question, index) => (
             <div key={question.id} className="flex items-center gap-2">
               <div className="w-6 h-6 flex items-center justify-center">
-                <span className="text-xs text-muted-foreground">{index + 1}</span>
+                <span className="text-xs text-muted-foreground">
+                  {index + 1}
+                </span>
               </div>
               <div className="flex-grow">
                 <Input
                   value={question.text}
                   onChange={(e) => handleUpdateQuestion(index, e.target.value)}
                   placeholder="Question text"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={() => handleRemoveQuestion(index)}
                 className="text-destructive"
               >
                 <CircleX className="h-4 w-4" />
               </Button>
             </div>
           ))}
 
           <div className="pt-2 border-t">
             <div className="flex items-center gap-2">
               <div className="w-6 h-6 flex items-center justify-center">
                 <CirclePlus className="h-4 w-4 text-muted-foreground" />
               </div>
               <div className="flex-grow">
                 <Input
                   value={newQuestionText}
                   onChange={(e) => setNewQuestionText(e.target.value)}
                   placeholder="Add new question"
                   onKeyDown={(e) => e.key === "Enter" && handleAddQuestion()}
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={handleAddQuestion}
               >
                 <CirclePlus className="h-4 w-4 text-primary" />
               </Button>
             </div>
           </div>
         </div>
       </div>
 
       {/* Columns (options) section */}
       <div className="space-y-2 border rounded-md p-4">
         <div className="flex justify-between items-center">
           <Label>Columns (Answer Options)</Label>
         </div>
 
         <div className="space-y-3">
           {options.map((option, index) => (
             <div key={option.id} className="flex items-center gap-2">
               <div className="w-6 h-6 flex items-center justify-center">
-                <span className="text-xs text-muted-foreground">{index + 1}</span>
+                <span className="text-xs text-muted-foreground">
+                  {index + 1}
+                </span>
               </div>
               <div className="flex-grow grid grid-cols-2 gap-2">
                 <Input
                   value={option.text}
-                  onChange={(e) => handleUpdateOption(index, "text", e.target.value)}
+                  onChange={(e) =>
+                    handleUpdateOption(index, "text", e.target.value)
+                  }
                   placeholder="Option label"
                 />
                 <Input
                   value={option.value}
-                  onChange={(e) => handleUpdateOption(index, "value", e.target.value)}
+                  onChange={(e) =>
+                    handleUpdateOption(index, "value", e.target.value)
+                  }
                   placeholder="Option value"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={() => handleRemoveOption(index)}
                 className="text-destructive"
               >
                 <CircleX className="h-4 w-4" />
               </Button>
             </div>
           ))}
 
           <div className="pt-2 border-t">
             <div className="flex items-center gap-2">
               <div className="w-6 h-6 flex items-center justify-center">
                 <CirclePlus className="h-4 w-4 text-muted-foreground" />
               </div>
               <div className="flex-grow grid grid-cols-2 gap-2">
                 <Input
                   value={newOptionText}
                   onChange={(e) => setNewOptionText(e.target.value)}
                   placeholder="New option label"
                 />
                 <Input
                   value={newOptionValue}
                   onChange={(e) => setNewOptionValue(e.target.value)}
                   placeholder="New option value (optional)"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={handleAddOption}
               >
                 <CirclePlus className="h-4 w-4 text-primary" />
               </Button>
             </div>
           </div>
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="columnHeader">Column Header (Optional)</Label>
         <Input
           id="columnHeader"
           value={data.columnHeader || ""}
           onChange={(e) => handleChange("columnHeader", e.target.value)}
           placeholder="Rating"
         />
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const MatrixBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const MatrixBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   const [responses, setResponses] = React.useState<Record<string, string>>({});
   const questions: MatrixQuestion[] = data.questions || [];
   const options: MatrixOption[] = data.options || [];
 
   const handleSelect = (questionId: string, value: string) => {
     setResponses({
       ...responses,
       [questionId]: value,
     });
   };
 
   return (
     <div className="space-y-4">
-      {data.label && (
-        <h3 className="text-lg font-medium">{data.label}</h3>
-      )}
+      {data.label && <h3 className="text-lg font-medium">{data.label}</h3>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <div className="border rounded-md overflow-x-auto">
         <Table>
           <TableHeader>
             <TableRow>
               <TableHead className="w-[250px]"></TableHead>
               {options.map((option) => (
-                <TableHead key={option.id} className="text-center whitespace-nowrap">
+                <TableHead
+                  key={option.id}
+                  className="text-center whitespace-nowrap"
+                >
                   {option.text}
                 </TableHead>
               ))}
             </TableRow>
           </TableHeader>
-          <TableBody> 
-           {questions.map((question) => (
-             <RadioGroup
-               key={question.id}
-               asChild                      // ← render your TableRow instead of a div
-               value={responses[question.id] || ""}
-               onValueChange={(value) => handleSelect(question.id, value)}
-             >
-               <TableRow>
-                 <TableCell className="font-medium">
-                   {question.text}
-                 </TableCell>
-                 {options.map((option) => (
-                   <TableCell key={option.id} className="text-center">
-                     <RadioGroupItem
-                       value={option.value}
-                       id={`${data.fieldName}-${question.id}-${option.id}`}
-                       className="mx-auto"
-                     />
-                   </TableCell>
-                 ))}
-               </TableRow>
-             </RadioGroup>
-           ))}
+          <TableBody>
+            {questions.map((question) => (
+              <RadioGroup
+                key={question.id}
+                asChild // ← render your TableRow instead of a div
+                value={responses[question.id] || ""}
+                onValueChange={(value) => handleSelect(question.id, value)}
+              >
+                <TableRow>
+                  <TableCell className="font-medium">{question.text}</TableCell>
+                  {options.map((option) => (
+                    <TableCell key={option.id} className="text-center">
+                      <RadioGroupItem
+                        value={option.value}
+                        id={`${data.fieldName}-${question.id}-${option.id}`}
+                        className="mx-auto"
+                      />
+                    </TableCell>
+                  ))}
+                </TableRow>
+              </RadioGroup>
+            ))}
           </TableBody>
         </Table>
       </div>
     </div>
   );
 };
 
 // Preview component shown in the block library
 const MatrixBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <div className="w-4/5 max-w-full h-10 border rounded-md flex items-center justify-center">
         <Grid3X3 className="w-4 h-4 mr-2 text-muted-foreground" />
         <span className="text-sm text-muted-foreground">Matrix grid</span>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const MatrixBlock: BlockDefinition = {
   type: "matrix",
   name: "Matrix / Grid",
   description: "Grid of questions with the same response options",
   icon: <Grid3X3 className="w-4 h-4" />,
   defaultData: {
     type: "matrix",
     fieldName: `matrix${uuidv4().substring(0, 4)}`,
     label: "Please rate the following items",
     description: "Select one option for each row",
     columnHeader: "Rating",
     questions: [
       { id: uuidv4(), text: "Item 1" },
       { id: uuidv4(), text: "Item 2" },
       { id: uuidv4(), text: "Item 3" },
     ],
     options: [
       { id: uuidv4(), text: "Poor", value: "1" },
       { id: uuidv4(), text: "Fair", value: "2" },
       { id: uuidv4(), text: "Good", value: "3" },
       { id: uuidv4(), text: "Excellent", value: "4" },
     ],
+    isEndBlock: false,
   },
   renderItem: (props) => <MatrixBlockItem {...props} />,
   renderFormFields: (props) => <MatrixBlockForm {...props} />,
-  renderPreview: () => <MatrixBlockPreview/>,
+  renderPreview: () => <MatrixBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Matrix title is required";
-    if (!data.questions || data.questions.length === 0) return "At least one question is required";
-    if (!data.options || data.options.length === 0) return "At least one option is required";
+    if (!data.questions || data.questions.length === 0)
+      return "At least one question is required";
+    if (!data.options || data.options.length === 0)
+      return "At least one option is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/RadioBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/RadioBlock.tsx
index cb7e311b2a9a78a0deb9584846d22acb52e0877a..0fc6677cb169e646767783bb49972bf61aaf59a1 100644
--- a/src/packages/survey-form-builder/src/components/blocks/RadioBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/RadioBlock.tsx
@@ -1,33 +1,33 @@
 import React, { useState } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Button } from "@/components/ui/button";
 import { CircleCheck, CirclePlus, CircleX } from "lucide-react";
-import { Circle } from "lucide-react";  // optional, for an SVG circle
+import { Circle } from "lucide-react"; // optional, for an SVG circle
 import { v4 as uuidv4 } from "uuid";
 
 // Form component for editing the block configuration
 const RadioBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const [newLabel, setNewLabel] = useState("");
   const [newValue, setNewValue] = useState("");
 
   // Handle field changes
   const handleChange = (field: string, value: any) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   // Handle adding a new option
   const handleAddOption = () => {
     if (!newLabel.trim()) return;
 
     const labels = [...(data.labels || [])];
     const values = [...(data.values || [])];
 
@@ -106,141 +106,147 @@ const RadioBlockForm: React.FC<ContentBlockItemProps> = ({
             {(data.labels || []).map((label, index) => (
               <div key={index} className="flex items-center gap-2">
                 <div className="w-6 h-6 flex items-center justify-center">
                   <Circle className="h-4 w-4 text-muted-foreground" />
                 </div>
                 <div className="flex-grow grid grid-cols-2 gap-2">
                   <Input
                     value={label}
                     onChange={(e) => {
                       const labels = [...(data.labels || [])];
                       labels[index] = e.target.value;
                       handleChange("labels", labels);
                     }}
                     placeholder="Option label"
                   />
                   <Input
                     value={(data.values || [])[index] as string}
                     onChange={(e) => {
                       const values = [...(data.values || [])];
                       values[index] = e.target.value;
                       handleChange("values", values);
                     }}
                     placeholder="Option value"
                   />
                 </div>
-                <Button type="button"
+                <Button
+                  type="button"
                   variant="ghost"
                   size="icon"
                   onClick={() => handleRemoveOption(index)}
                   className="text-destructive"
                 >
                   <CircleX className="h-4 w-4" />
                 </Button>
               </div>
             ))}
           </div>
 
           <div className="pt-2 border-t mt-2">
             <div className="flex items-center gap-2 mt-2">
               <div className="w-6 h-6 flex items-center justify-center">
                 <CirclePlus className="h-4 w-4 text-muted-foreground" />
               </div>
               <div className="flex-grow grid grid-cols-2 gap-2">
                 <Input
                   value={newLabel}
                   onChange={(e) => setNewLabel(e.target.value)}
                   placeholder="New option label"
                 />
                 <Input
                   value={newValue}
                   onChange={(e) => setNewValue(e.target.value)}
                   placeholder="New option value (optional)"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={handleAddOption}
               >
                 <CirclePlus className="h-4 w-4 text-primary" />
               </Button>
             </div>
           </div>
         </div>
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const RadioBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const RadioBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div className="space-y-4">
-      {data.label && (
-        <Label>{data.label}</Label>
-      )}
+      {data.label && <Label>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
-      <RadioGroup defaultValue={data.defaultValue as string} className="grid gap-2">
+      <RadioGroup
+        defaultValue={data.defaultValue as string}
+        className="grid gap-2"
+      >
         {(data.labels || []).map((label, index) => (
           <div key={index} className="flex items-center space-x-2">
             <RadioGroupItem
               value={(data.values || [])[index] as string}
               id={`${data.fieldName}-${index}`}
             />
             <Label htmlFor={`${data.fieldName}-${index}`}>{label}</Label>
           </div>
         ))}
       </RadioGroup>
     </div>
   );
 };
 
 // Preview component shown in the block library
 const RadioBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
-      <RadioGroup defaultValue="1" className="w-4/5 max-w-full space-y-1 grid gap-2">
+      <RadioGroup
+        defaultValue="1"
+        className="w-4/5 max-w-full space-y-1 grid gap-2"
+      >
         <div className="flex items-center space-x-2">
           <RadioGroupItem value="1" id="preview-1" />
           <Label htmlFor="preview-1">Option 1</Label>
         </div>
         <div className="flex items-center space-x-2">
           <RadioGroupItem value="2" id="preview-2" />
           <Label htmlFor="preview-2">Option 2</Label>
         </div>
       </RadioGroup>
     </div>
   );
 };
 
 // Export the block definition
 export const RadioBlock: BlockDefinition = {
   type: "radio",
   name: "Radio Buttons",
   description: "Single selection from multiple options",
   icon: <CircleCheck className="w-4 h-4" />,
   defaultData: {
     type: "radio",
     fieldName: `radioOption${uuidv4().substring(0, 4)}`,
     label: "Select an option",
     description: "",
     labels: ["Option 1", "Option 2", "Option 3"],
     values: ["1", "2", "3"],
     defaultValue: "1",
+    isEndBlock: false,
   },
   renderItem: (props) => <RadioBlockItem {...props} />,
   renderFormFields: (props) => <RadioBlockForm {...props} />,
-  renderPreview: () => <RadioBlockPreview/>,
+  renderPreview: () => <RadioBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
-    if (!data.labels || !data.labels.length) return "At least one option is required";
+    if (!data.labels || !data.labels.length)
+      return "At least one option is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/RangeBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/RangeBlock.tsx
index f53e47c81123b8163fe726790aa6d390322fb3c0..cdcda4e75fd1fe77fda6166af985b8a5a6f01920 100644
--- a/src/packages/survey-form-builder/src/components/blocks/RangeBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/RangeBlock.tsx
@@ -77,182 +77,190 @@ const RangeBlockForm: React.FC<ContentBlockItemProps> = ({
             type="number"
             value={data.max || "100"}
             onChange={(e) => handleChange("max", parseInt(e.target.value, 10))}
           />
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="step">Step</Label>
           <Input
             id="step"
             type="number"
             value={data.step || "1"}
             onChange={(e) => handleChange("step", parseInt(e.target.value, 10))}
           />
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="defaultValue">Default Value</Label>
         <div className="pt-4">
           <Slider
             id="defaultValue"
             min={parseInt(String(data.min || "0"), 10)}
             max={parseInt(String(data.max || "100"), 10)}
             step={parseInt(String(data.step || "1"), 10)}
-            value={[data.defaultValue !== undefined ? Number(data.defaultValue) : parseInt(String(data.min || "0"), 10)]}
+            value={[
+              data.defaultValue !== undefined
+                ? Number(data.defaultValue)
+                : parseInt(String(data.min || "0"), 10),
+            ]}
             onValueChange={(values) => handleChange("defaultValue", values[0])}
           />
         </div>
         <div className="flex justify-between mt-1 text-xs text-muted-foreground">
           <span>{data.min || 0}</span>
-          <span>Current: {data.defaultValue !== undefined ? data.defaultValue : (data.min || 0)}</span>
+          <span>
+            Current:{" "}
+            {data.defaultValue !== undefined
+              ? data.defaultValue
+              : data.min || 0}
+          </span>
           <span>{data.max || 100}</span>
         </div>
       </div>
 
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="showValue">Value Label</Label>
           <Input
             id="showValue"
             value={data.showValue || "Selected: {value}"}
             onChange={(e) => handleChange("showValue", e.target.value)}
             placeholder="Value: {value}"
           />
           <p className="text-xs text-muted-foreground">
-            Use {'{value}'} to show the selected value
+            Use {"{value}"} to show the selected value
           </p>
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="markStep">Show Marks Every</Label>
           <Input
             id="markStep"
             type="number"
             value={data.markStep || "0"}
-            onChange={(e) => handleChange("markStep", parseInt(e.target.value, 10))}
+            onChange={(e) =>
+              handleChange("markStep", parseInt(e.target.value, 10))
+            }
             placeholder="0"
           />
           <p className="text-xs text-muted-foreground">
             Set to 0 to hide marks, or specify an interval
           </p>
         </div>
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const RangeBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const RangeBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   const [value, setValue] = React.useState<number>(
     data.defaultValue !== undefined
       ? Number(data.defaultValue)
-      : parseInt(String(data.min || "0"), 10)
+      : parseInt(String(data.min || "0"), 10),
   );
 
   const min = parseInt(String(data.min || "0"), 10);
   const max = parseInt(String(data.max || "100"), 10);
   const step = parseInt(String(data.step || "1"), 10);
 
   // Generate marks if specified
   const marks: React.ReactNode[] = [];
   if (data.markStep && parseInt(String(data.markStep), 10) > 0) {
     const markStep = parseInt(String(data.markStep), 10);
     for (let i = min; i <= max; i += markStep) {
       marks.push(
-        <div key={i} className="absolute text-xs -translate-x-1/2" style={{ left: `${((i - min) / (max - min)) * 100}%`, top: "20px" }}>
+        <div
+          key={i}
+          className="absolute text-xs -translate-x-1/2"
+          style={{ left: `${((i - min) / (max - min)) * 100}%`, top: "20px" }}
+        >
           {i}
-        </div>
+        </div>,
       );
     }
   }
 
   // Format the value display
   const valueDisplay = data.showValue
     ? data.showValue.replace("{value}", String(value))
     : `Value: ${value}`;
 
   return (
     <div className="space-y-4">
-      {data.label && (
-        <Label htmlFor={data.fieldName}>{data.label}</Label>
-      )}
+      {data.label && <Label htmlFor={data.fieldName}>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <div className="pt-2">
         <Slider
           id={data.fieldName}
           min={min}
           max={max}
           step={step}
           value={[value]}
           onValueChange={(values) => setValue(values[0])}
           className="mb-6"
         />
-        {marks.length > 0 && (
-          <div className="relative h-6 mt-1">
-            {marks}
-          </div>
-        )}
+        {marks.length > 0 && <div className="relative h-6 mt-1">{marks}</div>}
         <div className="flex justify-between text-sm text-muted-foreground">
           <span>{min}</span>
           <span className="font-medium text-primary">{valueDisplay}</span>
           <span>{max}</span>
         </div>
       </div>
     </div>
   );
 };
 
 // Preview component shown in the block library
 const RangeBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <Slider
         value={[50]}
         max={100}
         step={1}
         disabled
         className="w-4/5 max-w-full"
       />
     </div>
   );
 };
 
 // Export the block definition
 export const RangeBlock: BlockDefinition = {
   type: "range",
   name: "Range Slider",
   description: "Slider for selecting numeric values within a range",
   icon: <ArrowRightToLine className="w-4 h-4" />,
   defaultData: {
     type: "range",
     fieldName: `range${uuidv4().substring(0, 4)}`,
     label: "Select a value",
     description: "",
     min: 0,
     max: 100,
     step: 1,
     defaultValue: 50,
     showValue: "Selected: {value}",
     markStep: 25,
+    isEndBlock: false,
   },
   renderItem: (props) => <RangeBlockItem {...props} />,
   renderFormFields: (props) => <RangeBlockForm {...props} />,
-  renderPreview: () => <RangeBlockPreview/>,
+  renderPreview: () => <RangeBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
 
     const min = parseInt(String(data.min || "0"), 10);
     const max = parseInt(String(data.max || "100"), 10);
 
     if (min >= max) return "Minimum value must be less than maximum value";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/ScriptBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/ScriptBlock.tsx
index e58e60b3ee63c9376f2427a52851a66f59c74dc5..ae8462224bdbcd4ae008d5996fa180afd78a56a7 100644
--- a/src/packages/survey-form-builder/src/components/blocks/ScriptBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/ScriptBlock.tsx
@@ -1,91 +1,95 @@
 import React from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Textarea } from "@/components/ui/textarea";
 import { Label } from "@/components/ui/label";
 import { Terminal } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 
 // Form component for editing the block configuration
 const ScriptBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   // Handle field changes
   const handleChange = (field: string, value: string) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   return (
     <div className="space-y-4">
       <div className="space-y-2">
         <Label htmlFor="script">JavaScript Code</Label>
         <p className="text-xs text-muted-foreground">
-          This script will be executed when the page is rendered.
-          The script has access to <code>formData</code>, <code>pageData</code>,
-          and <code>renderer</code> objects.
+          This script will be executed when the page is rendered. The script has
+          access to <code>formData</code>, <code>pageData</code>, and{" "}
+          <code>renderer</code> objects.
         </p>
         <Textarea
           id="script"
           value={data.script || ""}
           onChange={(e) => handleChange("script", e.target.value)}
           placeholder="// Example: validate or transform form data\nconsole.log('Running script...');\nformData.calculatedValue = formData.input1 + formData.input2;"
           rows={12}
           className="font-mono text-sm"
         />
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey - script blocks don't have visible UI
-const ScriptBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const ScriptBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div className="p-2 border rounded bg-muted/20">
       <div className="flex items-center gap-2 text-muted-foreground">
         <Terminal className="h-4 w-4" />
         <span className="text-sm">Script Block (runs on page load)</span>
       </div>
       {data.script && (
         <pre className="mt-2 text-xs font-mono whitespace-pre-wrap p-2 bg-muted rounded">
-          {data.script.length > 100 ? `${data.script.substring(0, 100)}...` : data.script}
+          {data.script.length > 100
+            ? `${data.script.substring(0, 100)}...`
+            : data.script}
         </pre>
       )}
     </div>
   );
 };
 
 // Preview component shown in the block library
 const ScriptBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <div className="text-center w-4/5 max-w-full text-sm">
         <span className="text-muted-foreground">JavaScript</span>
-        <code className="px-2 py-1 bg-muted rounded-md text-xs">console.log()</code>
+        <code className="px-2 py-1 bg-muted rounded-md text-xs">
+          console.log()
+        </code>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const ScriptBlock: BlockDefinition = {
   type: "script",
   name: "Script",
   description: "Custom JavaScript code for form logic",
   icon: <Terminal className="w-4 h-4" />,
   defaultData: {
     type: "script",
-    script: "// This script runs when the page loads\nconsole.log('Script block executed');\n\n// You can access and modify form data\n// formData.calculated = formData.input1 + formData.input2;",
+    script:
+      "// This script runs when the page loads\nconsole.log('Script block executed');\n\n// You can access and modify form data\n// formData.calculated = formData.input1 + formData.input2;",
+    isEndBlock: false,
   },
   renderItem: (props) => <ScriptBlockItem {...props} />,
   renderFormFields: (props) => <ScriptBlockForm {...props} />,
-  renderPreview: () => <ScriptBlockPreview/>,
+  renderPreview: () => <ScriptBlockPreview />,
   validate: (data) => {
     if (!data.script) return "Script content is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/SelectBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/SelectBlock.tsx
index b7805dd30976ba8765353aa4985ed47cf9d48dc0..e957571893d4516246867c42a9d9ed8ee2515acc 100644
--- a/src/packages/survey-form-builder/src/components/blocks/SelectBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/SelectBlock.tsx
@@ -1,31 +1,37 @@
 import React, { useState } from "react";
 import { BlockDefinition, ContentBlockItemProps } from "../../types";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Button } from "@/components/ui/button";
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import {
+  Select,
+  SelectContent,
+  SelectItem,
+  SelectTrigger,
+  SelectValue,
+} from "@/components/ui/select";
 import { CirclePlus, CircleX, ListFilter } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 
 // Form component for editing the block configuration
 const SelectBlockForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const [newLabel, setNewLabel] = useState("");
   const [newValue, setNewValue] = useState("");
 
   // Handle field changes
   const handleChange = (field: string, value: any) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   // Handle adding a new option
   const handleAddOption = () => {
     if (!newLabel.trim()) return;
 
     const labels = [...(data.labels || [])];
     const values = [...(data.values || [])];
@@ -90,184 +96,192 @@ const SelectBlockForm: React.FC<ContentBlockItemProps> = ({
 
       <div className="space-y-2">
         <Label htmlFor="description">Description/Help Text</Label>
         <Input
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="Additional information about this question"
         />
       </div>
 
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="placeholder">Placeholder</Label>
           <Input
             id="placeholder"
             value={data.placeholder || ""}
             onChange={(e) => handleChange("placeholder", e.target.value)}
             placeholder="Select an option..."
           />
         </div>
 
         <div className="space-y-2">
           <Label htmlFor="defaultValue">Default Value</Label>
           <Select
-            value={data.defaultValue as string || ""}
+            value={(data.defaultValue as string) || ""}
             onValueChange={(value) => handleChange("defaultValue", value)}
           >
             <SelectTrigger>
               <SelectValue placeholder="Select a default option" />
             </SelectTrigger>
             <SelectContent>
               {(data.labels || []).map((label, index) => (
-                <SelectItem key={index} value={(data.values || [])[index] as string}>
+                <SelectItem
+                  key={index}
+                  value={(data.values || [])[index] as string}
+                >
                   {label}
                 </SelectItem>
               ))}
             </SelectContent>
           </Select>
         </div>
       </div>
 
       <div className="space-y-2">
         <Label>Options</Label>
         <div className="border rounded-md p-4 space-y-3">
           <div className="space-y-4">
             {(data.labels || []).map((label, index) => (
               <div key={index} className="flex items-center gap-2">
                 <div className="w-6 h-6 flex items-center justify-center">
                   <ListFilter className="h-4 w-4 text-muted-foreground" />
                 </div>
                 <div className="flex-grow grid grid-cols-2 gap-2">
                   <Input
                     value={label}
                     onChange={(e) => {
                       const labels = [...(data.labels || [])];
                       labels[index] = e.target.value;
                       handleChange("labels", labels);
                     }}
                     placeholder="Option label"
                   />
                   <Input
                     value={(data.values || [])[index] as string}
                     onChange={(e) => {
                       const values = [...(data.values || [])];
                       values[index] = e.target.value;
                       handleChange("values", values);
                     }}
                     placeholder="Option value"
                   />
                 </div>
-                <Button type="button"
+                <Button
+                  type="button"
                   variant="ghost"
                   size="icon"
                   onClick={() => handleRemoveOption(index)}
                   className="text-destructive"
                 >
                   <CircleX className="h-4 w-4" />
                 </Button>
               </div>
             ))}
           </div>
 
           <div className="pt-2 border-t mt-2">
             <div className="flex items-center gap-2 mt-2">
               <div className="w-6 h-6 flex items-center justify-center">
                 <CirclePlus className="h-4 w-4 text-muted-foreground" />
               </div>
               <div className="flex-grow grid grid-cols-2 gap-2">
                 <Input
                   value={newLabel}
                   onChange={(e) => setNewLabel(e.target.value)}
                   placeholder="New option label"
                 />
                 <Input
                   value={newValue}
                   onChange={(e) => setNewValue(e.target.value)}
                   placeholder="New option value (optional)"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={handleAddOption}
               >
                 <CirclePlus className="h-4 w-4 text-primary" />
               </Button>
             </div>
           </div>
         </div>
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const SelectBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const SelectBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div className="space-y-2">
-      {data.label && (
-        <Label htmlFor={data.fieldName}>{data.label}</Label>
-      )}
+      {data.label && <Label htmlFor={data.fieldName}>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <Select defaultValue={data.defaultValue as string}>
         <SelectTrigger id={data.fieldName}>
-          <SelectValue placeholder={data.placeholder || "Select an option..."} />
+          <SelectValue
+            placeholder={data.placeholder || "Select an option..."}
+          />
         </SelectTrigger>
         <SelectContent>
           {(data.labels || []).map((label, index) => (
-            <SelectItem key={index} value={(data.values || [])[index] as string}>
+            <SelectItem
+              key={index}
+              value={(data.values || [])[index] as string}
+            >
               {label}
             </SelectItem>
           ))}
         </SelectContent>
       </Select>
     </div>
   );
 };
 
 // Preview component shown in the block library
 const SelectBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <Select disabled>
         <SelectTrigger className="w-4/5 max-w-full">
           <SelectValue placeholder="Dropdown select" />
         </SelectTrigger>
       </Select>
     </div>
   );
 };
 
 // Export the block definition
 export const SelectBlock: BlockDefinition = {
   type: "select",
   name: "Dropdown Select",
   description: "Single selection from a dropdown list",
   icon: <ListFilter className="w-4 h-4" />,
   defaultData: {
     type: "select",
     fieldName: `select${uuidv4().substring(0, 4)}`,
     label: "Select an option",
     description: "",
     placeholder: "Choose from the list...",
     labels: ["Option 1", "Option 2", "Option 3"],
     values: ["1", "2", "3"],
     defaultValue: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <SelectBlockItem {...props} />,
   renderFormFields: (props) => <SelectBlockForm {...props} />,
-  renderPreview: () => <SelectBlockPreview/>,
+  renderPreview: () => <SelectBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
-    if (!data.labels || !data.labels.length) return "At least one option is required";
+    if (!data.labels || !data.labels.length)
+      return "At least one option is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/SelectableBoxQuestionBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/SelectableBoxQuestionBlock.tsx
index 1862dd809070f41f11569553e91c56239b7170e0..a0197ad0920712569ae3762e1344d6a862347dd7 100644
--- a/src/packages/survey-form-builder/src/components/blocks/SelectableBoxQuestionBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/SelectableBoxQuestionBlock.tsx
@@ -4,84 +4,91 @@ import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Button } from "@/components/ui/button";
 import { Card } from "@/components/ui/card";
 import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
 import { CirclePlus, CircleX, CheckSquare } from "lucide-react";
 import { v4 as uuidv4 } from "uuid";
 
 interface BoxOption {
   id: string;
   label: string;
   value: string;
 }
 
 // Form component for editing the block configuration
 const SelectableBoxQuestionForm: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
 }) => {
   const [newOptionLabel, setNewOptionLabel] = useState("");
   const [newOptionValue, setNewOptionValue] = useState("");
 
   // Extract options from block data
   const options: BoxOption[] = data.options || [];
 
   // Handle field changes
-  const handleChange = (field: string, value: string | BoxOption[] | boolean) => {
+  const handleChange = (
+    field: string,
+    value: string | BoxOption[] | boolean,
+  ) => {
     onUpdate?.({
       ...data,
       [field]: value,
     });
   };
 
   // Handle adding a new option
   const handleAddOption = () => {
     if (!newOptionLabel.trim()) return;
 
     const newOptions = [
       ...options,
       {
         id: uuidv4(),
         label: newOptionLabel,
         value: newOptionValue || newOptionLabel,
-      }
+      },
     ];
 
     handleChange("options", newOptions);
     setNewOptionLabel("");
     setNewOptionValue("");
   };
 
   // Handle removing an option
   const handleRemoveOption = (index: number) => {
     const newOptions = [...options];
     newOptions.splice(index, 1);
     handleChange("options", newOptions);
   };
 
   // Handle updating an option
-  const handleUpdateOption = (index: number, field: "label" | "value", value: string) => {
+  const handleUpdateOption = (
+    index: number,
+    field: "label" | "value",
+    value: string,
+  ) => {
     const newOptions = [...options];
     newOptions[index] = {
       ...newOptions[index],
       [field]: value,
     };
     handleChange("options", newOptions);
   };
 
   return (
     <div className="space-y-4">
       <div className="grid grid-cols-2 gap-4">
         <div className="space-y-2">
           <Label htmlFor="fieldName">Field Name</Label>
           <Input
             id="fieldName"
             value={data.fieldName || ""}
             onChange={(e) => handleChange("fieldName", e.target.value)}
             placeholder="selectBox1"
           />
           <p className="text-xs text-muted-foreground">
             Unique identifier for storing responses
           </p>
         </div>
 
         <div className="space-y-2">
@@ -93,235 +100,253 @@ const SelectableBoxQuestionForm: React.FC<ContentBlockItemProps> = ({
             placeholder="What's your goal?"
           />
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="description">Description/Help Text (Optional)</Label>
         <Input
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="Additional information about this question"
         />
       </div>
 
       {/* Options section */}
       <div className="space-y-2 border rounded-md p-4">
         <div className="flex justify-between items-center">
           <Label>Selectable Options</Label>
         </div>
 
         <div className="space-y-3">
           {options.map((option, index) => (
             <div key={option.id} className="flex items-center gap-2">
               <div className="w-6 h-6 flex items-center justify-center">
-                <span className="text-xs text-muted-foreground">{index + 1}</span>
+                <span className="text-xs text-muted-foreground">
+                  {index + 1}
+                </span>
               </div>
               <div className="flex-grow grid grid-cols-2 gap-2">
                 <Input
                   value={option.label}
-                  onChange={(e) => handleUpdateOption(index, "label", e.target.value)}
+                  onChange={(e) =>
+                    handleUpdateOption(index, "label", e.target.value)
+                  }
                   placeholder="Option label"
                 />
                 <Input
                   value={option.value}
-                  onChange={(e) => handleUpdateOption(index, "value", e.target.value)}
+                  onChange={(e) =>
+                    handleUpdateOption(index, "value", e.target.value)
+                  }
                   placeholder="Option value"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={() => handleRemoveOption(index)}
                 className="text-destructive"
               >
                 <CircleX className="h-4 w-4" />
               </Button>
             </div>
           ))}
 
           <div className="pt-2 border-t">
             <div className="flex items-center gap-2">
               <div className="w-6 h-6 flex items-center justify-center">
                 <CirclePlus className="h-4 w-4 text-muted-foreground" />
               </div>
               <div className="flex-grow grid grid-cols-2 gap-2">
                 <Input
                   value={newOptionLabel}
                   onChange={(e) => setNewOptionLabel(e.target.value)}
                   placeholder="New option label"
                   onKeyDown={(e) => e.key === "Enter" && handleAddOption()}
                 />
                 <Input
                   value={newOptionValue}
                   onChange={(e) => setNewOptionValue(e.target.value)}
                   placeholder="New option value (optional)"
                 />
               </div>
-              <Button type="button"
+              <Button
+                type="button"
                 variant="ghost"
                 size="icon"
                 onClick={handleAddOption}
               >
                 <CirclePlus className="h-4 w-4 text-primary" />
               </Button>
             </div>
           </div>
         </div>
       </div>
 
       {/* Optional visual configuration settings */}
       <div className="space-y-2 pt-2 border-t">
         <Label>Visual Settings</Label>
         <div className="grid grid-cols-2 gap-4">
           <div className="space-y-2">
             <Label htmlFor="boxSpacing">Spacing Between Boxes</Label>
             <Input
               id="boxSpacing"
               type="number"
               min="0"
               max="8"
               value={data.boxSpacing || "4"}
               onChange={(e) => handleChange("boxSpacing", e.target.value)}
             />
             <p className="text-xs text-muted-foreground">
               Space between selectable boxes (0-8)
             </p>
           </div>
-          
+
           <div className="space-y-2">
-            <Label htmlFor="defaultValue">Default Selected Value (Optional)</Label>
+            <Label htmlFor="defaultValue">
+              Default Selected Value (Optional)
+            </Label>
             <Input
               id="defaultValue"
               value={data.defaultValue || ""}
               onChange={(e) => handleChange("defaultValue", e.target.value)}
               placeholder="Leave blank for no default selection"
             />
           </div>
         </div>
 
         <div className="space-y-2 pt-2">
           <Label htmlFor="showSelectionIndicator">Selection Style</Label>
           <div className="flex items-center space-x-2">
             <input
               type="checkbox"
               id="showSelectionIndicator"
               checked={data.showSelectionIndicator !== false}
-              onChange={(e) => handleChange("showSelectionIndicator", e.target.checked)}
+              onChange={(e) =>
+                handleChange("showSelectionIndicator", e.target.checked)
+              }
               className="rounded border-gray-300 text-primary focus:ring-primary"
             />
             <label htmlFor="showSelectionIndicator" className="text-sm">
               Show selection indicator icon
             </label>
           </div>
         </div>
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
 const SelectableBoxQuestionItem: React.FC<ContentBlockItemProps> = ({
   data,
 }) => {
-  const [selectedValue, setSelectedValue] = React.useState<string>(data.defaultValue || "");
+  const [selectedValue, setSelectedValue] = React.useState<string>(
+    data.defaultValue || "",
+  );
   const options: BoxOption[] = data.options || [];
   const boxSpacing = data.boxSpacing || "4";
   const showSelectionIndicator = data.showSelectionIndicator !== false;
 
   return (
     <div className="space-y-4">
       {data.questionTitle && (
         <h3 className="text-2xl font-bold">{data.questionTitle}</h3>
       )}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
-      <RadioGroup 
-        value={selectedValue} 
+      <RadioGroup
+        value={selectedValue}
         onValueChange={setSelectedValue}
         className={`space-y-${boxSpacing}`}
       >
         {options.map((option) => {
           const isSelected = selectedValue === option.value;
           return (
             <div key={option.id} className="relative">
-              <RadioGroupItem 
-                value={option.value} 
+              <RadioGroupItem
+                value={option.value}
                 id={`${data.fieldName}-${option.id}`}
                 className="sr-only"
               />
-              <Label 
-                htmlFor={`${data.fieldName}-${option.id}`} 
+              <Label
+                htmlFor={`${data.fieldName}-${option.id}`}
                 className="block w-full cursor-pointer"
               >
-                <Card 
+                <Card
                   className={`p-4 transition-colors ${
-                    isSelected 
-                      ? "border-primary bg-primary/5 dark:bg-primary/20" 
+                    isSelected
+                      ? "border-primary bg-primary/5 dark:bg-primary/20"
                       : "hover:bg-accent dark:hover:bg-accent/50"
                   }`}
                 >
                   <div className="flex items-center justify-between">
                     <span className="text-foreground">{option.label}</span>
                     {isSelected && showSelectionIndicator && (
                       <div className="flex h-5 w-5 items-center justify-center rounded-full bg-primary text-primary-foreground">
                         <CheckSquare className="h-3 w-3" />
                       </div>
                     )}
                   </div>
                 </Card>
               </Label>
             </div>
           );
         })}
       </RadioGroup>
     </div>
   );
 };
 
 // Preview component shown in the block library
 const SelectableBoxQuestionPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <div className="w-4/5 max-w-full h-10 border rounded-md flex items-center justify-center">
         <CheckSquare className="w-4 h-4 mr-2 text-muted-foreground" />
-        <span className="text-sm text-muted-foreground">Selectable Box Question</span>
+        <span className="text-sm text-muted-foreground">
+          Selectable Box Question
+        </span>
       </div>
     </div>
   );
 };
 
 // Export the block definition
 export const SelectableBoxQuestionBlock: BlockDefinition = {
   type: "selectablebox",
   name: "Selectable Box Question",
   description: "Question with selectable box options",
   icon: <CheckSquare className="w-4 h-4" />,
   defaultData: {
     type: "selectablebox",
     fieldName: `boxq${uuidv4().substring(0, 4)}`,
     questionTitle: "What's your goal?",
     description: "",
     boxSpacing: "4",
     defaultValue: "",
     showSelectionIndicator: true,
     options: [
       { id: uuidv4(), label: "Lose 5 to 20 lbs", value: "5-20" },
       { id: uuidv4(), label: "Lose 21 to 50 lbs", value: "21-50" },
       { id: uuidv4(), label: "Lose 51+ lbs", value: "51+" },
       { id: uuidv4(), label: "I'm not sure yet", value: "unsure" },
     ],
+    isEndBlock: false,
   },
   renderItem: (props) => <SelectableBoxQuestionItem {...props} />,
   renderFormFields: (props) => <SelectableBoxQuestionForm {...props} />,
   renderPreview: () => <SelectableBoxQuestionPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.questionTitle) return "Question title is required";
-    if (!data.options || data.options.length === 0) return "At least one option is required";
+    if (!data.options || data.options.length === 0)
+      return "At least one option is required";
     return null;
   },
-};
\ No newline at end of file
+};
diff --git a/src/packages/survey-form-builder/src/components/blocks/TextInputBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/TextInputBlock.tsx
index 38558c824e7c542fa05ab78d0f88a5454a6fac8f..75d62679c81b33e3658bd2d0f8b8b0acfb4e4843 100644
--- a/src/packages/survey-form-builder/src/components/blocks/TextInputBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/TextInputBlock.tsx
@@ -61,84 +61,81 @@ const TextInputBlockForm: React.FC<ContentBlockItemProps> = ({
 
         <div className="space-y-2">
           <Label htmlFor="defaultValue">Default Value</Label>
           <Input
             id="defaultValue"
             value={data.defaultValue || ""}
             onChange={(e) => handleChange("defaultValue", e.target.value)}
           />
         </div>
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="description">Description/Help Text</Label>
         <Input
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="Additional information about this question"
         />
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const TextInputBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const TextInputBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div className="space-y-2">
-      {data.label && (
-        <Label htmlFor={data.fieldName}>{data.label}</Label>
-      )}
+      {data.label && <Label htmlFor={data.fieldName}>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <Input
         id={data.fieldName}
         name={data.fieldName}
         placeholder={data.placeholder}
         defaultValue={data.defaultValue}
       />
     </div>
   );
 };
 
 // Preview component shown in the block library
 const TextInputBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <Input
         placeholder="Text input field"
         className="w-4/5 max-w-full"
         disabled
       />
     </div>
   );
 };
 
 // Export the block definition
 export const TextInputBlock: BlockDefinition = {
   type: "textfield",
   name: "Text Input",
   description: "Single line text field for short answers",
   icon: <LucideTextCursor className="w-4 h-4" />,
   defaultData: {
     type: "textfield",
     fieldName: `textInput${uuidv4().substring(0, 4)}`,
     label: "Text Input Question",
     placeholder: "Type your answer here",
     description: "",
     defaultValue: "",
+    isEndBlock: false,
   },
   renderItem: (props) => <TextInputBlockItem {...props} />,
   renderFormFields: (props) => <TextInputBlockForm {...props} />,
-  renderPreview: () => <TextInputBlockPreview/>,
+  renderPreview: () => <TextInputBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/components/blocks/TextareaBlock.tsx b/src/packages/survey-form-builder/src/components/blocks/TextareaBlock.tsx
index ae4c315e73bd54a3c4229f7c3cbeb6d9b465aed4..9db329c60e1615c2a9560e9e0b2ad8cebeacc2a5 100644
--- a/src/packages/survey-form-builder/src/components/blocks/TextareaBlock.tsx
+++ b/src/packages/survey-form-builder/src/components/blocks/TextareaBlock.tsx
@@ -77,87 +77,84 @@ const TextareaBlockForm: React.FC<ContentBlockItemProps> = ({
       <div className="space-y-2">
         <Label htmlFor="description">Description/Help Text</Label>
         <Input
           id="description"
           value={data.description || ""}
           onChange={(e) => handleChange("description", e.target.value)}
           placeholder="Additional information about this question"
         />
       </div>
 
       <div className="space-y-2">
         <Label htmlFor="defaultValue">Default Value</Label>
         <Textarea
           id="defaultValue"
           value={data.defaultValue || ""}
           onChange={(e) => handleChange("defaultValue", e.target.value)}
           placeholder="Default response text"
           rows={3}
         />
       </div>
     </div>
   );
 };
 
 // Component to render the block in the survey
-const TextareaBlockItem: React.FC<ContentBlockItemProps> = ({
-  data,
-}) => {
+const TextareaBlockItem: React.FC<ContentBlockItemProps> = ({ data }) => {
   return (
     <div className="space-y-2">
-      {data.label && (
-        <Label htmlFor={data.fieldName}>{data.label}</Label>
-      )}
+      {data.label && <Label htmlFor={data.fieldName}>{data.label}</Label>}
 
       {data.description && (
         <p className="text-sm text-muted-foreground">{data.description}</p>
       )}
 
       <Textarea
         id={data.fieldName}
         name={data.fieldName}
         placeholder={data.placeholder}
         defaultValue={data.defaultValue}
         rows={data.rows ? parseInt(data.rows as string, 10) : 3}
       />
     </div>
   );
 };
 
 // Preview component shown in the block library
 const TextareaBlockPreview: React.FC = () => {
   return (
     <div className="w-full flex items-center justify-center py-1">
       <Textarea
         placeholder="Multi-line text input"
         className="w-4/5 max-w-full"
         rows={2}
         disabled
       />
     </div>
   );
 };
 
 // Export the block definition
 export const TextareaBlock: BlockDefinition = {
   type: "textarea",
   name: "Text Area",
   description: "Multi-line text field for longer answers",
   icon: <AlignLeft className="w-4 h-4" />,
   defaultData: {
     type: "textarea",
     fieldName: `textArea${uuidv4().substring(0, 4)}`,
     label: "Text Area Question",
     placeholder: "Type your answer here",
     description: "",
     defaultValue: "",
     rows: "3",
+    isEndBlock: false,
   },
   renderItem: (props) => <TextareaBlockItem {...props} />,
   renderFormFields: (props) => <TextareaBlockForm {...props} />,
-  renderPreview: () => <TextareaBlockPreview/>,
+  renderPreview: () => <TextareaBlockPreview />,
   validate: (data) => {
     if (!data.fieldName) return "Field name is required";
     if (!data.label) return "Label is required";
     return null;
   },
 };
diff --git a/src/packages/survey-form-builder/src/survey/blocks/ContentBlockItem.tsx b/src/packages/survey-form-builder/src/survey/blocks/ContentBlockItem.tsx
index ec700ed5b877f219a5d7d51e20d794bbe26ddcb3..6a7dfa861492889e37d68e87690364a70178536b 100644
--- a/src/packages/survey-form-builder/src/survey/blocks/ContentBlockItem.tsx
+++ b/src/packages/survey-form-builder/src/survey/blocks/ContentBlockItem.tsx
@@ -1,111 +1,132 @@
 import type React from "react";
 import { useState } from "react";
 import { Button } from "@/components/ui/button";
-import { Card, CardContent, CardHeader, CardFooter } from "@/components/ui/card";
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  CardFooter,
+} from "@/components/ui/card";
+import { Checkbox } from "@/components/ui/checkbox";
+import { Label } from "@/components/ui/label";
 import { useSurveyBuilder } from "../../context/SurveyBuilderContext";
 import { BlockData } from "../../types";
 import { NavigationRulesEditor } from "../../components/common/NavigationRulesEditor";
-import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
+import {
+  Dialog,
+  DialogContent,
+  DialogHeader,
+  DialogTitle,
+  DialogTrigger,
+} from "@/components/ui/dialog";
 
 interface ContentBlockItemProps {
   data: BlockData;
   onUpdate: (data: BlockData) => void;
   onRemove: () => void;
 }
 
 export const ContentBlockItem: React.FC<ContentBlockItemProps> = ({
   data,
   onUpdate,
   onRemove,
 }) => {
   const { state } = useSurveyBuilder();
   const [isEditing, setIsEditing] = useState(false);
   const blockDefinition = state.definitions.blocks[data.type];
 
   if (!blockDefinition) {
     return (
       <Card className="mb-4 content-block-item border-destructive">
         <CardHeader className="flex flex-row items-center justify-between pb-2">
           <div className="flex gap-2 items-center">
-            <span className="text-destructive">Unknown block type: {data.type}</span>
+            <span className="text-destructive">
+              Unknown block type: {data.type}
+            </span>
           </div>
           <div className="flex gap-2">
-            <Button type="button"
+            <Button
+              type="button"
               variant="destructive"
               size="sm"
               onClick={onRemove}
             >
               Remove
             </Button>
           </div>
         </CardHeader>
       </Card>
     );
   }
 
   return (
     <Card className="mb-4 content-block-item">
       <CardHeader className="flex flex-row items-center justify-between pb-2">
         <div className="flex gap-2 items-center">
           {blockDefinition.icon && <span>{blockDefinition.icon}</span>}
-          <span className="font-medium">{data.name || blockDefinition.name}</span>
+          <span className="font-medium">
+            {data.name || blockDefinition.name}
+          </span>
           {data.fieldName && (
             <span className="text-xs bg-muted px-2 py-1 rounded-md">
               {data.fieldName}
             </span>
           )}
         </div>
         <div className="flex gap-2">
           <Dialog open={isEditing} onOpenChange={setIsEditing}>
             <DialogTrigger asChild>
-              <Button type="button"
-                variant="outline"
-                size="sm"
-              >
+              <Button type="button" variant="outline" size="sm">
                 Edit
               </Button>
             </DialogTrigger>
             <DialogContent className="max-w-3xl">
               <DialogHeader>
                 <DialogTitle>Edit {blockDefinition.name}</DialogTitle>
               </DialogHeader>
               <div className="py-4">
                 {blockDefinition.renderFormFields({
                   data,
                   onUpdate,
                   onRemove: () => {
                     setIsEditing(false);
                     onRemove();
                   },
                 })}
+                <div className="flex items-center space-x-2 py-2">
+                  <Checkbox
+                    id="endBlock"
+                    checked={!!data.isEndBlock}
+                    onCheckedChange={(checked) =>
+                      onUpdate({ ...data, isEndBlock: !!checked })
+                    }
+                  />
+                  <Label htmlFor="endBlock">End block</Label>
+                </div>
                 <NavigationRulesEditor data={data} onUpdate={onUpdate} />
               </div>
             </DialogContent>
           </Dialog>
 
-          <Button type="button"
-            variant="outline"
-            size="sm"
-            onClick={onRemove}
-          >
+          <Button type="button" variant="outline" size="sm" onClick={onRemove}>
             Remove
           </Button>
         </div>
       </CardHeader>
 
       <CardContent>
         {blockDefinition.renderItem({
           data,
           onUpdate,
           onRemove,
         })}
       </CardContent>
 
       <CardFooter className="bg-muted/50 flex justify-end">
         <div className="text-xs text-muted-foreground">
           {data.uuid ? `ID: ${data.uuid.substring(0, 8)}` : "New Item"}
         </div>
       </CardFooter>
     </Card>
   );
 };
diff --git a/src/packages/survey-form-builder/src/types.ts b/src/packages/survey-form-builder/src/types.ts
index d21f09650e46b9995e1f97c58bb545d846cadbb9..e3af05f3a370eaac3a2f580b750221e841fcfdcb 100644
--- a/src/packages/survey-form-builder/src/types.ts
+++ b/src/packages/survey-form-builder/src/types.ts
@@ -15,83 +15,85 @@ export interface NodeData {
   type: string;
   items?: Array<BlockData>;
   nodes?: Array<NodeData | UUID>;
   navigationLogic?: string;
   entryLogic?: string;
   exitLogic?: string;
   backLogic?: string;
   [key: string]: any;
 }
 
 export interface BlockData {
   type: string;
   name?: string;
   label?: string;
   description?: string;
   fieldName?: string;
   placeholder?: string;
   text?: string;
   html?: string;
   items?: Array<BlockData>;
   labels?: Array<string>;
   values?: Array<string | number | boolean>;
   defaultValue?: any;
   className?: string;
   showResults?: boolean;
+  /** Marks this block as the end of the survey */
+  isEndBlock?: boolean;
   navigationRules?: NavigationRule[];
   visibleIf?: any;
   [key: string]: any;
 }
 
 export interface ContentBlockItemProps {
   data: BlockData;
   onUpdate?: (data: BlockData) => void;
   onRemove?: () => void;
 }
 
 export interface BlockDefinition {
   type: string;
   name: string;
   description: string;
   icon?: ReactNode;
   defaultData: BlockData;
   renderItem: (props: ContentBlockItemProps) => JSX.Element;
   renderFormFields: (props: ContentBlockItemProps) => JSX.Element;
   renderPreview: (props: ContentBlockItemProps) => JSX.Element;
   validate?: (data: BlockData) => string | null;
 }
 
 export interface NodeDefinition {
   type: string;
   name: string;
   description: string;
-  uuid: UUID,
+  uuid: UUID;
   icon?: ReactNode;
   defaultData: NodeData;
   renderNode: (props: {
     data: NodeData;
     onUpdate: (data: NodeData) => void;
     onRemove: () => void;
   }) => JSX.Element;
 }
 
 export interface LocalizationMap {
   [key: string]: {
     [key: string]: string;
   };
 }
 
 export interface SurveyBuilderState {
   rootNode: NodeData | null;
   definitions: {
     blocks: Record<string, BlockDefinition>;
     nodes: Record<string, NodeDefinition>;
   };
   localizations: LocalizationMap;
   selectedNode: UUID | null;
-  displayMode: 'list' | 'graph' | 'lang';
+  displayMode: "list" | "graph" | "lang";
 }
 
 export interface SurveyBuilderAction {
   type: string;
   payload?: any;
 }
diff --git a/src/packages/survey-form-renderer/src/components/layouts/FullPageSurveyLayout.tsx b/src/packages/survey-form-renderer/src/components/layouts/FullPageSurveyLayout.tsx
index e50ed401e9341fb5a397a692f16f0910b4e56d5e..aeef42431de0c45ca9146d0d4733362b7a47e09d 100644
--- a/src/packages/survey-form-renderer/src/components/layouts/FullPageSurveyLayout.tsx
+++ b/src/packages/survey-form-renderer/src/components/layouts/FullPageSurveyLayout.tsx
@@ -71,217 +71,227 @@ export const FullPageSurveyLayout: React.FC<FullPageSurveyLayoutProps> = ({
     setValue,
     errors,
     goToNextBlock,
     goToPreviousBlock,
     isFirstPage,
     isLastPage,
     submit,
     isValid,
     theme,
     surveyData,
     // Enhanced navigation properties
     navigationHistory,
     canGoBack,
     getActualProgress,
     getTotalVisibleSteps,
     getCurrentStepPosition,
     getVisibleBlocks,
   } = useSurveyForm();
 
   const themeConfig = themes[theme] || themes.default;
   const containerRef = useRef<HTMLDivElement>(null);
   const firstInputRef = useRef<HTMLInputElement>(null);
 
   // Get the current page blocks from the surveyData in context
   const pages = getSurveyPages(surveyData.rootNode);
-  const currentPageBlocks = currentPage < pages.length ? pages[currentPage] : [];
+  const currentPageBlocks =
+    currentPage < pages.length ? pages[currentPage] : [];
+  const currentBlock = currentPageBlocks[currentBlockIndex];
   const visibleCurrentPageBlocks = getVisibleBlocks(currentPageBlocks);
+  const isEndBlock = currentBlock?.isEndBlock;
 
   // Auto-focus first input when step changes
   useEffect(() => {
     if (autoFocus && firstInputRef.current) {
       setTimeout(() => {
         firstInputRef.current?.focus();
       }, 200);
     }
   }, [currentPage, currentBlockIndex, autoFocus]);
 
   // Handle form submission
   const handleSubmit = (e: React.FormEvent) => {
     e.preventDefault();
-    if (isLastPage && currentBlockIndex === currentPageBlocks.length - 1) {
+    if (
+      isEndBlock ||
+      (isLastPage && currentBlockIndex === currentPageBlocks.length - 1)
+    ) {
       submit();
     } else {
       goToNextBlock();
     }
   };
 
   // Handle previous navigation using history
   const handlePrevious = () => {
     if (canGoBack) {
       goToPreviousBlock();
     }
   };
 
   // Calculate progress percentage based on actual visible steps completed
   const progressPercentage = getActualProgress();
   const currentStepPosition = getCurrentStepPosition();
   const totalVisibleSteps = getTotalVisibleSteps();
 
   // Get button text from navigationButtons or fallback
   const continueText = navigationButtons?.nextText || "Continue";
   const completeText = navigationButtons?.submitText || submitText;
 
   // Debug info (only shown when enableDebug is true)
-  const debugInfo = enableDebug ? {
-    currentPage,
-    currentBlockIndex,
-    totalPages,
-    totalVisibleSteps,
-    currentStepPosition,
-    progressPercentage: Math.round(progressPercentage),
-    navigationHistoryLength: navigationHistory.length,
-    canGoBack,
-    visibleBlocksInCurrentPage: visibleCurrentPageBlocks.length,
-  } : null;
+  const debugInfo = enableDebug
+    ? {
+        currentPage,
+        currentBlockIndex,
+        totalPages,
+        totalVisibleSteps,
+        currentStepPosition,
+        progressPercentage: Math.round(progressPercentage),
+        navigationHistoryLength: navigationHistory.length,
+        canGoBack,
+        visibleBlocksInCurrentPage: visibleCurrentPageBlocks.length,
+      }
+    : null;
 
   return (
     <div
       className="survey-fullpage-layout min-h-[80vh] flex flex-col"
       ref={containerRef}
     >
       {/* Debug Panel (only visible when enableDebug is true) */}
       {enableDebug && (
         <div className="w-full bg-yellow-50 border-b border-yellow-200 p-2 text-xs">
           <div className="max-w-2xl mx-auto">
             <details className="cursor-pointer">
-              <summary className="font-medium text-yellow-800">Debug Info</summary>
+              <summary className="font-medium text-yellow-800">
+                Debug Info
+              </summary>
               <pre className="mt-2 text-yellow-700 whitespace-pre-wrap">
                 {JSON.stringify(debugInfo, null, 2)}
               </pre>
             </details>
           </div>
         </div>
       )}
 
       {/* Header with back button and progress bar */}
       <div className="w-full py-4">
         <div className="w-full max-w-2xl mx-auto px-4">
           {/* Back Button Row */}
           <div className="flex items-center justify-between mb-4">
             {/* Enhanced Previous Button with history indicator */}
             {navigationButtons?.showPrevious !== false && canGoBack ? (
               <div className="flex items-center space-x-2">
                 <Button
                   type="button"
                   variant="ghost"
                   size="sm"
                   onClick={handlePrevious}
                   className={cn(
                     "opacity-50 hover:opacity-100 transition-opacity",
                     "w-8 h-8 p-0 rounded-full",
                     "hover:bg-muted",
                   )}
                 >
                   <ChevronLeft className="w-4 h-4" />
                   <span className="sr-only">
                     {navigationButtons?.previousText || "Previous"}
                   </span>
                 </Button>
-                
+
                 {/* Navigation history indicator */}
                 {showNavigationHistory && (
                   <div className="text-xs text-muted-foreground flex items-center">
                     <History className="w-3 h-3 mr-1" />
                     {navigationHistory.length - 1}
                   </div>
                 )}
               </div>
             ) : (
               <div className="w-8" /> // Placeholder to maintain layout
             )}
 
             {/* Enhanced step indicator with percentage */}
             <div className="text-sm text-muted-foreground flex flex-col items-center">
               <div>{Math.round(progressPercentage)}% </div>
               {enableDebug && (
                 <div className="text-xs opacity-75">
                   Step {currentStepPosition + 1} of {totalVisibleSteps}
                 </div>
               )}
             </div>
           </div>
 
           {/* Enhanced Progress Bar with percentage */}
           {progressBar && (
             <div className="w-full">
               {typeof progressBar === "object" &&
               progressBar.position === "bottom" ? null : (
                 <div className="space-y-1">
                   <div
                     className={cn(
                       "h-2 w-full rounded-full overflow-hidden",
                       "bg-muted",
                     )}
                   >
                     <motion.div
                       className={cn(
                         "h-full transition-all duration-500 ease-out rounded-full",
                         typeof progressBar === "object" && progressBar.color
                           ? progressBar.color
                           : "bg-primary",
                       )}
                       initial={{ width: "0%" }}
                       animate={{ width: `${progressPercentage}%` }}
                     />
                   </div>
-                  
+
                   {/* Progress bar type variations */}
                   {typeof progressBar === "object" && (
                     <>
                       {progressBar.type === "dots" && (
                         <div className="flex justify-center space-x-1 mt-2">
                           {Array.from({ length: totalVisibleSteps }, (_, i) => (
                             <div
                               key={i}
                               className={cn(
                                 "w-2 h-2 rounded-full transition-colors",
                                 i <= currentStepPosition
                                   ? "bg-primary"
-                                  : "bg-muted"
+                                  : "bg-muted",
                               )}
                             />
                           ))}
                         </div>
                       )}
-                      
+
                       {progressBar.type === "numbers" && (
                         <div className="text-center text-xs text-muted-foreground mt-1">
                           {currentStepPosition + 1} / {totalVisibleSteps}
                         </div>
                       )}
-                                          </>
+                    </>
                   )}
                 </div>
               )}
             </div>
           )}
         </div>
       </div>
 
       {/* Main Content Area - Blocks at the top with margin */}
       <div className="flex flex-col mt-8">
         <div className="w-full max-w-2xl mx-auto px-4 flex-1 flex flex-col mt-8">
           <AnimatePresence mode="wait">
             <motion.div
               key={`${currentPage}-${currentBlockIndex}`}
               initial={{ opacity: 0, y: 20 }}
               animate={{ opacity: 1, y: 0 }}
               exit={{ opacity: 0, y: -20 }}
               transition={{ duration: 0.4, ease: "easeInOut" }}
               className="flex-1 flex flex-col"
             >
               {/* Question Content - positioned at top */}
               <div className="space-y-8 mb-16">
                 {currentPageBlocks[currentBlockIndex] && (
                   <div className="space-y-4">
                     <BlockRenderer
@@ -336,66 +346,68 @@ export const FullPageSurveyLayout: React.FC<FullPageSurveyLayoutProps> = ({
               {navigationButtons?.position === "split" &&
                 canGoBack &&
                 navigationButtons?.showPrevious !== false && (
                   <Button
                     type="button"
                     variant="outline"
                     onClick={handlePrevious}
                     className="mr-auto"
                   >
                     <ChevronLeft className="mr-2 w-4 h-4" />
                     {navigationButtons?.previousText || "Previous"}
                   </Button>
                 )}
 
               {/* Main Action Button */}
               <Button
                 type="submit"
                 disabled={!isValid}
                 size="lg"
                 className={cn(
                   "px-8 py-4 text-lg font-medium transition-all duration-200",
                   "hover:scale-105 active:scale-95",
                   "min-w-[160px] rounded-xl",
                 )}
               >
-                {isLastPage &&
-                currentBlockIndex === currentPageBlocks.length - 1
+                {isEndBlock ||
+                (isLastPage &&
+                  currentBlockIndex === currentPageBlocks.length - 1)
                   ? completeText
                   : continueText}
                 {!(
-                  isLastPage &&
-                  currentBlockIndex === currentPageBlocks.length - 1
+                  isEndBlock ||
+                  (isLastPage &&
+                    currentBlockIndex === currentPageBlocks.length - 1)
                 ) && <ArrowRight className="ml-2 w-5 h-5" />}
               </Button>
             </div>
           </form>
         </div>
       </div>
 
       {/* Bottom progress bar (if positioned at bottom) */}
-      {progressBar && 
-       typeof progressBar === "object" && 
-       progressBar.position === "bottom" && (
-        <div className="w-full border-t bg-background/80 backdrop-blur-sm">
-          <div className="w-full max-w-2xl mx-auto px-4 py-2">
-            <div
-              className={cn(
-                "h-1 w-full rounded-full overflow-hidden",
-                "bg-muted",
-              )}
-            >
-              <motion.div
+      {progressBar &&
+        typeof progressBar === "object" &&
+        progressBar.position === "bottom" && (
+          <div className="w-full border-t bg-background/80 backdrop-blur-sm">
+            <div className="w-full max-w-2xl mx-auto px-4 py-2">
+              <div
                 className={cn(
-                  "h-full transition-all duration-500 ease-out rounded-full",
-                  progressBar.color || "bg-primary",
+                  "h-1 w-full rounded-full overflow-hidden",
+                  "bg-muted",
                 )}
-                initial={{ width: "0%" }}
-                animate={{ width: `${progressPercentage}%` }}
-              />
+              >
+                <motion.div
+                  className={cn(
+                    "h-full transition-all duration-500 ease-out rounded-full",
+                    progressBar.color || "bg-primary",
+                  )}
+                  initial={{ width: "0%" }}
+                  animate={{ width: `${progressPercentage}%` }}
+                />
+              </div>
             </div>
           </div>
-        </div>
-      )}
+        )}
     </div>
   );
-};
\ No newline at end of file
+};
diff --git a/src/packages/survey-form-renderer/src/components/layouts/PageByPageLayout.tsx b/src/packages/survey-form-renderer/src/components/layouts/PageByPageLayout.tsx
index 6740141c9db394767785d5d83ca37255aadf6faf..c0f250f74b3c627080dc3043d21a5f9ef5574573 100644
--- a/src/packages/survey-form-renderer/src/components/layouts/PageByPageLayout.tsx
+++ b/src/packages/survey-form-renderer/src/components/layouts/PageByPageLayout.tsx
@@ -1,189 +1,214 @@
-import React, { useEffect, useRef } from 'react';
-import { useSurveyForm } from '../../context/SurveyFormContext';
-import { ProgressBar } from '../ui/ProgressBar';
-import { NavigationButtons } from '../ui/NavigationButtons';
-import { BlockRenderer } from '../blocks/BlockRenderer';
-import { DebugInfo } from '../ui/DebugInfo';
-import { themes } from '../../themes';
-import { motion, AnimatePresence } from 'framer-motion';
-import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
-import { cn } from '@/lib/utils';
+import React, { useEffect, useRef } from "react";
+import { useSurveyForm } from "../../context/SurveyFormContext";
+import { ProgressBar } from "../ui/ProgressBar";
+import { NavigationButtons } from "../ui/NavigationButtons";
+import { BlockRenderer } from "../blocks/BlockRenderer";
+import { DebugInfo } from "../ui/DebugInfo";
+import { themes } from "../../themes";
+import { motion, AnimatePresence } from "framer-motion";
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+} from "@/components/ui/card";
+import { cn } from "@/lib/utils";
 
 interface PageByPageLayoutProps {
-  progressBar?: boolean | {
-    type?: 'bar' | 'dots' | 'numbers' | 'percentage';
-    showPercentage?: boolean;
-    showStepInfo?: boolean;
-    showStepTitles?: boolean;
-    showStepNumbers?: boolean;
-    position?: 'top' | 'bottom';
-    color?: string;
-    backgroundColor?: string;
-    height?: number | string;
-    animation?: boolean;
-  };
+  progressBar?:
+    | boolean
+    | {
+        type?: "bar" | "dots" | "numbers" | "percentage";
+        showPercentage?: boolean;
+        showStepInfo?: boolean;
+        showStepTitles?: boolean;
+        showStepNumbers?: boolean;
+        position?: "top" | "bottom";
+        color?: string;
+        backgroundColor?: string;
+        height?: number | string;
+        animation?: boolean;
+      };
   navigationButtons?: {
     showPrevious?: boolean;
     showNext?: boolean;
     showSubmit?: boolean;
     previousText?: string;
     nextText?: string;
     submitText?: string;
-    position?: 'bottom' | 'split';
-    align?: 'left' | 'center' | 'right';
-    style?: 'default' | 'outlined' | 'text';
+    position?: "bottom" | "split";
+    align?: "left" | "center" | "right";
+    style?: "default" | "outlined" | "text";
   };
   autoScroll?: boolean;
   autoFocus?: boolean;
   showSummary?: boolean;
   submitText?: string;
   enableDebug?: boolean;
-  showPageLocationHeader? : boolean;
+  showPageLocationHeader?: boolean;
 }
 
 export const PageByPageLayout: React.FC<PageByPageLayoutProps> = ({
   progressBar = true,
   navigationButtons = {
     showPrevious: true,
     showNext: true,
     showSubmit: true,
-    previousText: 'Previous',
-    nextText: 'Next',
-    submitText: 'Submit',
-    position: 'bottom',
-    align: 'center',
-    style: 'default',
+    previousText: "Previous",
+    nextText: "Next",
+    submitText: "Submit",
+    position: "bottom",
+    align: "center",
+    style: "default",
   },
   autoScroll = true,
   autoFocus = true,
   showSummary = false,
-  submitText = 'Submit',
+  submitText = "Submit",
   enableDebug = false,
   showPageLocationHeader = false,
 }) => {
   // Enable debug mode for development
-  const showDebug = process.env.NODE_ENV !== 'production';
+  const showDebug = process.env.NODE_ENV !== "production";
 
   const {
     currentPage,
     totalPages,
     values,
     setValue,
     errors,
     goToNextPage,
     goToPreviousPage,
     isFirstPage,
     isLastPage,
     submit,
     isValid,
-    theme
+    theme,
   } = useSurveyForm();
 
   const themeConfig = themes[theme] || themes.default;
   const containerRef = useRef<HTMLDivElement>(null);
   const firstInputRef = useRef<HTMLInputElement>(null);
 
   // Auto-scroll to the top of the container when page changes
   useEffect(() => {
     if (autoScroll && containerRef.current) {
       containerRef.current.scrollTo({
         top: 0,
-        behavior: 'smooth',
+        behavior: "smooth",
       });
     }
   }, [currentPage, autoScroll]);
 
   // Auto-focus first input when page changes
   useEffect(() => {
     if (autoFocus && firstInputRef.current) {
       setTimeout(() => {
         firstInputRef.current?.focus();
       }, 300); // Small delay to ensure the page has rendered
     }
   }, [currentPage, autoFocus]);
 
   // Get the current page blocks from the surveyData in context
-  const { getSurveyPages } = require('../../utils/surveyUtils');
+  const { getSurveyPages } = require("../../utils/surveyUtils");
   const { surveyData } = useSurveyForm();
   const pages = getSurveyPages(surveyData.rootNode);
-  const currentPageBlocks = currentPage < pages.length ? pages[currentPage] : [];
+  const currentPageBlocks =
+    currentPage < pages.length ? pages[currentPage] : [];
+  const containsEndBlock = currentPageBlocks.some((b) => b.isEndBlock);
 
   // Handle form submission
   const handleSubmit = (e: React.FormEvent) => {
     e.preventDefault();
     submit();
   };
 
   // Find the page title (either from the first block or default)
   const pageTitle = currentPageBlocks[0]?.name || `Page ${currentPage + 1}`;
 
   // Apply dark mode styling
-  const isDarkMode = theme === 'dark';
+  const isDarkMode = theme === "dark";
 
   return (
     <div className="survey-page-by-page-layout" ref={containerRef}>
       {/* Progress bar */}
       {progressBar && currentPage >= 0 && (
         <ProgressBar
           currentPage={currentPage}
           totalPages={totalPages}
-          options={typeof progressBar === 'object' ? progressBar : undefined}
+          options={typeof progressBar === "object" ? progressBar : undefined}
         />
       )}
 
       {/* Form */}
       <form onSubmit={handleSubmit} className="survey-form">
         <AnimatePresence mode="wait">
           <motion.div
             key={currentPage}
             initial={{ opacity: 0, x: 50 }}
             animate={{ opacity: 1, x: 0 }}
             exit={{ opacity: 0, x: -50 }}
             transition={{ duration: 0.3 }}
             className="w-full"
           >
-            <Card className={cn("border", isDarkMode && "bg-card text-card-foreground border-border")}>
+            <Card
+              className={cn(
+                "border",
+                isDarkMode && "bg-card text-card-foreground border-border",
+              )}
+            >
               <CardHeader>
-              {showPageLocationHeader &&
-                <CardTitle>{pageTitle}</CardTitle>
-              }
+                {showPageLocationHeader && <CardTitle>{pageTitle}</CardTitle>}
               </CardHeader>
 
               <CardContent>
                 {/* Page content */}
                 <div className="survey-page-content space-y-6">
                   {currentPageBlocks.map((block, index) => (
                     <BlockRenderer
                       key={block.uuid || `block-${index}`}
                       block={block}
-                      value={block.fieldName ? values[block.fieldName] : undefined}
-                      onChange={(value) => block.fieldName && setValue(block.fieldName, value)}
-                      error={block.fieldName ? errors[block.fieldName] : undefined}
+                      value={
+                        block.fieldName ? values[block.fieldName] : undefined
+                      }
+                      onChange={(value) =>
+                        block.fieldName && setValue(block.fieldName, value)
+                      }
+                      error={
+                        block.fieldName ? errors[block.fieldName] : undefined
+                      }
                       ref={index === 0 ? firstInputRef : undefined}
                       theme={theme}
                     />
                   ))}
                 </div>
 
                 {/* Debug information */}
                 <DebugInfo show={enableDebug} />
 
                 {/* Navigation buttons */}
                 <div className="mt-6">
                   <NavigationButtons
                     onPrevious={!isFirstPage ? goToPreviousPage : undefined}
-                    onNext={!isLastPage ? goToNextPage : undefined}
-                    onSubmit={isLastPage ? submit : undefined}
+                    onNext={
+                      !containsEndBlock && !isLastPage
+                        ? goToNextPage
+                        : undefined
+                    }
+                    onSubmit={
+                      containsEndBlock || isLastPage ? submit : undefined
+                    }
                     isValid={isValid}
                     options={navigationButtons}
                     submitText={submitText}
                   />
                 </div>
               </CardContent>
             </Card>
           </motion.div>
         </AnimatePresence>
       </form>
     </div>
   );
 };
diff --git a/src/packages/survey-form-renderer/src/components/layouts/StepperLayout.tsx b/src/packages/survey-form-renderer/src/components/layouts/StepperLayout.tsx
index 9c93ed4761d26e366d1ab8df0bbe929adb689d51..509949d5c7fd36b3345f142ae6f732aea55119ff 100644
--- a/src/packages/survey-form-renderer/src/components/layouts/StepperLayout.tsx
+++ b/src/packages/survey-form-renderer/src/components/layouts/StepperLayout.tsx
@@ -1,204 +1,247 @@
-import React, { useEffect, useRef } from 'react';
-import { useSurveyForm } from '../../context/SurveyFormContext';
-import { NavigationButtons } from '../ui/NavigationButtons';
-import { BlockRenderer } from '../blocks/BlockRenderer';
-import { themes } from '../../themes';
-import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
-import { Button } from '@/components/ui/button';
-import { DebugInfo } from '../ui/DebugInfo';
-import { cn } from '@/lib/utils';
-import { CheckIcon } from 'lucide-react';
+import React, { useEffect, useRef } from "react";
+import { useSurveyForm } from "../../context/SurveyFormContext";
+import { NavigationButtons } from "../ui/NavigationButtons";
+import { BlockRenderer } from "../blocks/BlockRenderer";
+import { themes } from "../../themes";
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  CardTitle,
+  CardDescription,
+} from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { DebugInfo } from "../ui/DebugInfo";
+import { cn } from "@/lib/utils";
+import { CheckIcon } from "lucide-react";
 
 interface StepperLayoutProps {
-  progressBar?: boolean | {
-    type?: 'bar' | 'dots' | 'numbers' | 'percentage';
-    showPercentage?: boolean;
-    showStepInfo?: boolean;
-    showStepTitles?: boolean;
-    showStepNumbers?: boolean;
-    position?: 'top' | 'bottom';
-    color?: string;
-    backgroundColor?: string;
-    height?: number | string;
-    animation?: boolean;
-  };
+  progressBar?:
+    | boolean
+    | {
+        type?: "bar" | "dots" | "numbers" | "percentage";
+        showPercentage?: boolean;
+        showStepInfo?: boolean;
+        showStepTitles?: boolean;
+        showStepNumbers?: boolean;
+        position?: "top" | "bottom";
+        color?: string;
+        backgroundColor?: string;
+        height?: number | string;
+        animation?: boolean;
+      };
   navigationButtons?: {
     showPrevious?: boolean;
     showNext?: boolean;
     showSubmit?: boolean;
     previousText?: string;
     nextText?: string;
     submitText?: string;
-    position?: 'bottom' | 'split';
-    align?: 'left' | 'center' | 'right';
-    style?: 'default' | 'outlined' | 'text';
+    position?: "bottom" | "split";
+    align?: "left" | "center" | "right";
+    style?: "default" | "outlined" | "text";
   };
   autoScroll?: boolean;
   autoFocus?: boolean;
   showSummary?: boolean;
   submitText?: string;
   enableDebug?: boolean;
 }
 
 export const StepperLayout: React.FC<StepperLayoutProps> = ({
   progressBar = true,
   navigationButtons = {
     showPrevious: true,
     showNext: true,
     showSubmit: true,
-    previousText: 'Previous',
-    nextText: 'Next',
-    submitText: 'Submit',
-    position: 'bottom',
-    align: 'center',
-    style: 'default',
+    previousText: "Previous",
+    nextText: "Next",
+    submitText: "Submit",
+    position: "bottom",
+    align: "center",
+    style: "default",
   },
   autoScroll = true,
   autoFocus = true,
   showSummary = false,
-  submitText = 'Submit',
-  enableDebug = false
+  submitText = "Submit",
+  enableDebug = false,
 }) => {
   // Enable debug mode for development
-  const showDebug = process.env.NODE_ENV !== 'production';
+  const showDebug = process.env.NODE_ENV !== "production";
 
   const {
     currentPage,
     currentBlockIndex,
     totalPages,
     values,
     setValue,
     errors,
     goToNextBlock,
     goToPreviousBlock,
     isFirstPage,
     isLastPage,
     submit,
     isValid,
     theme,
     goToPage,
-    surveyData
+    surveyData,
   } = useSurveyForm();
 
   const themeConfig = themes[theme] || themes.default;
   const containerRef = useRef<HTMLDivElement>(null);
 
   // Get all survey pages
-  const { getSurveyPages } = require('../../utils/surveyUtils');
+  const { getSurveyPages } = require("../../utils/surveyUtils");
   const pages = getSurveyPages(surveyData.rootNode);
+  const currentBlock = pages[currentPage]?.[currentBlockIndex];
 
   // Handle form submission
   const handleSubmit = (e: React.FormEvent) => {
     e.preventDefault();
     submit();
   };
 
   // Apply dark mode styling
-  const isDarkMode = theme === 'dark';
+  const isDarkMode = theme === "dark";
 
   return (
     <div className="survey-stepper-layout" ref={containerRef}>
       {/* Page tabs/steps */}
       <div className="survey-stepper-tabs mb-6">
         <div className="flex items-center justify-center flex-wrap gap-2">
           {pages.map((pageBlocks, index) => {
             const isActive = index === currentPage;
             const isCompleted = index < currentPage;
 
             // Get the step title
             const stepTitle = pageBlocks[0]?.name || `Step ${index + 1}`;
 
             return (
-              <div
-                key={`step-${index}`}
-                className="flex items-center"
-              >
+              <div key={`step-${index}`} className="flex items-center">
                 <Button
-                  variant={isActive ? "default" : isCompleted ? "outline" : "secondary"}
+                  variant={
+                    isActive ? "default" : isCompleted ? "outline" : "secondary"
+                  }
                   size="sm"
                   className={cn(
                     "h-9 rounded-full flex items-center mr-1",
-                    isCompleted && "bg-primary/10 hover:bg-primary/20"
+                    isCompleted && "bg-primary/10 hover:bg-primary/20",
                   )}
                   onClick={() => goToPage(index)}
                 >
                   {isCompleted ? (
                     <CheckIcon className="h-4 w-4 mr-1" />
                   ) : (
                     <span className="h-5 w-5 rounded-full flex items-center justify-center text-xs mr-1">
                       {index + 1}
                     </span>
                   )}
                   {pageBlocks[0]?.name && (
                     <span className="hidden sm:inline-block text-sm">
                       {stepTitle}
                     </span>
                   )}
                 </Button>
 
                 {/* Connector line */}
                 {index < pages.length - 1 && (
                   <div
                     className={cn(
                       "hidden sm:block w-8 h-0.5",
-                      index < currentPage ? "bg-primary" : "bg-muted"
+                      index < currentPage ? "bg-primary" : "bg-muted",
                     )}
                   />
                 )}
               </div>
             );
           })}
         </div>
       </div>
 
       {/* Form */}
       <form onSubmit={handleSubmit} className="survey-form">
-        <Card className={cn("border", isDarkMode && "bg-card text-card-foreground border-border")}>
+        <Card
+          className={cn(
+            "border",
+            isDarkMode && "bg-card text-card-foreground border-border",
+          )}
+        >
           {/* Page header */}
           {pages[currentPage] && pages[currentPage][0]?.name && (
             <CardHeader>
               <CardTitle>{pages[currentPage][0].name}</CardTitle>
               {pages[currentPage][0]?.description && (
-                <CardDescription>{pages[currentPage][0].description}</CardDescription>
+                <CardDescription>
+                  {pages[currentPage][0].description}
+                </CardDescription>
               )}
             </CardHeader>
           )}
 
           <CardContent>
             {/* Page content */}
             <div className="survey-page-content space-y-6">
               {pages[currentPage] && pages[currentPage][currentBlockIndex] && (
                 <BlockRenderer
-                  key={pages[currentPage][currentBlockIndex].uuid || `block-${currentBlockIndex}`}
+                  key={
+                    pages[currentPage][currentBlockIndex].uuid ||
+                    `block-${currentBlockIndex}`
+                  }
                   block={pages[currentPage][currentBlockIndex]}
-                  value={pages[currentPage][currentBlockIndex].fieldName ? values[pages[currentPage][currentBlockIndex].fieldName as string] : undefined}
+                  value={
+                    pages[currentPage][currentBlockIndex].fieldName
+                      ? values[
+                          pages[currentPage][currentBlockIndex]
+                            .fieldName as string
+                        ]
+                      : undefined
+                  }
                   onChange={(value) => {
-                    const field = pages[currentPage][currentBlockIndex].fieldName;
+                    const field =
+                      pages[currentPage][currentBlockIndex].fieldName;
                     if (field) setValue(field, value);
                   }}
-                  error={pages[currentPage][currentBlockIndex].fieldName ? errors[pages[currentPage][currentBlockIndex].fieldName as string] : undefined}
+                  error={
+                    pages[currentPage][currentBlockIndex].fieldName
+                      ? errors[
+                          pages[currentPage][currentBlockIndex]
+                            .fieldName as string
+                        ]
+                      : undefined
+                  }
                   theme={theme}
                 />
               )}
             </div>
 
             {/* Debug information */}
             <DebugInfo show={enableDebug} />
 
             {/* Navigation buttons */}
             <div className="mt-6">
               <NavigationButtons
-                onPrevious={!isFirstPage || currentBlockIndex > 0 ? goToPreviousBlock : undefined}
-                onNext={goToNextBlock}
-                onSubmit={isLastPage && currentBlockIndex === pages[currentPage].length - 1 ? submit : undefined}
+                onPrevious={
+                  !isFirstPage || currentBlockIndex > 0
+                    ? goToPreviousBlock
+                    : undefined
+                }
+                onNext={currentBlock?.isEndBlock ? undefined : goToNextBlock}
+                onSubmit={
+                  currentBlock?.isEndBlock ||
+                  (isLastPage &&
+                    currentBlockIndex === pages[currentPage].length - 1)
+                    ? submit
+                    : undefined
+                }
                 isValid={isValid}
                 options={navigationButtons}
                 submitText={submitText}
               />
             </div>
           </CardContent>
         </Card>
       </form>
     </div>
   );
 };
diff --git a/src/packages/survey-form-renderer/src/components/layouts/TabsLayout.tsx b/src/packages/survey-form-renderer/src/components/layouts/TabsLayout.tsx
index 80830bdde447d52a20a75ea205a8fa8248603f1e..d5d50bcd49fac584bbb426435e6fafdd17cceb79 100644
--- a/src/packages/survey-form-renderer/src/components/layouts/TabsLayout.tsx
+++ b/src/packages/survey-form-renderer/src/components/layouts/TabsLayout.tsx
@@ -1,162 +1,175 @@
-import React, { useEffect, useRef } from 'react';
-import { useSurveyForm } from '../../context/SurveyFormContext';
-import { NavigationButtons } from '../ui/NavigationButtons';
-import { BlockRenderer } from '../blocks/BlockRenderer';
-import { themes } from '../../themes';
+import React, { useEffect, useRef } from "react";
+import { useSurveyForm } from "../../context/SurveyFormContext";
+import { NavigationButtons } from "../ui/NavigationButtons";
+import { BlockRenderer } from "../blocks/BlockRenderer";
+import { themes } from "../../themes";
 
 interface TabsLayoutProps {
-  progressBar?: boolean | {
-    type?: 'bar' | 'dots' | 'numbers' | 'percentage';
-    showPercentage?: boolean;
-    showStepInfo?: boolean;
-    showStepTitles?: boolean;
-    showStepNumbers?: boolean;
-    position?: 'top' | 'bottom';
-    color?: string;
-    backgroundColor?: string;
-    height?: number | string;
-    animation?: boolean;
-  };
+  progressBar?:
+    | boolean
+    | {
+        type?: "bar" | "dots" | "numbers" | "percentage";
+        showPercentage?: boolean;
+        showStepInfo?: boolean;
+        showStepTitles?: boolean;
+        showStepNumbers?: boolean;
+        position?: "top" | "bottom";
+        color?: string;
+        backgroundColor?: string;
+        height?: number | string;
+        animation?: boolean;
+      };
   navigationButtons?: {
     showPrevious?: boolean;
     showNext?: boolean;
     showSubmit?: boolean;
     previousText?: string;
     nextText?: string;
     submitText?: string;
-    position?: 'bottom' | 'split';
-    align?: 'left' | 'center' | 'right';
-    style?: 'default' | 'outlined' | 'text';
+    position?: "bottom" | "split";
+    align?: "left" | "center" | "right";
+    style?: "default" | "outlined" | "text";
   };
   autoScroll?: boolean;
   autoFocus?: boolean;
   showSummary?: boolean;
   submitText?: string;
 }
 
 export const TabsLayout: React.FC<TabsLayoutProps> = ({
   progressBar = false,
   navigationButtons = {
     showPrevious: true,
     showNext: true,
     showSubmit: true,
-    previousText: 'Previous',
-    nextText: 'Next',
-    submitText: 'Submit',
-    position: 'bottom',
-    align: 'center',
-    style: 'default',
+    previousText: "Previous",
+    nextText: "Next",
+    submitText: "Submit",
+    position: "bottom",
+    align: "center",
+    style: "default",
   },
   autoScroll = true,
   autoFocus = false,
   showSummary = false,
-  submitText = 'Submit',
+  submitText = "Submit",
 }) => {
   const {
     currentPage,
     totalPages,
     values,
     setValue,
     errors,
     goToNextPage,
     goToPreviousPage,
     isFirstPage,
     isLastPage,
     submit,
     isValid,
     theme,
-    goToPage
+    goToPage,
   } = useSurveyForm();
 
   const themeConfig = themes[theme] || themes.default;
   const containerRef = useRef<HTMLDivElement>(null);
 
   // Get all survey pages
-  const { getSurveyPages } = require('../../utils/surveyUtils');
+  const { getSurveyPages } = require("../../utils/surveyUtils");
   const pages = getSurveyPages(useSurveyForm().surveyData.rootNode);
+  const containsEndBlock = pages[currentPage]?.some((b) => b.isEndBlock);
 
   // Auto-scroll to the top of the container when page changes
   useEffect(() => {
     if (autoScroll && containerRef.current) {
       containerRef.current.scrollTo({
         top: 0,
-        behavior: 'smooth',
+        behavior: "smooth",
       });
     }
   }, [currentPage, autoScroll]);
 
   // Handle form submission
   const handleSubmit = (e: React.FormEvent) => {
     e.preventDefault();
     submit();
   };
 
   return (
     <div className="survey-tabs-layout" ref={containerRef}>
       {/* Page tabs */}
       <div className="survey-tabs mb-6 flex items-center border-b overflow-x-auto">
         {pages.map((pageBlocks, index) => {
           const isActive = index === currentPage;
 
           // Get the tab title
           const tabTitle = pageBlocks[0]?.name || `Page ${index + 1}`;
 
           return (
             <button
               key={`tab-${index}`}
               className={`
                 px-4 py-2 text-sm font-medium border-b-2 whitespace-nowrap
-                ${isActive
-                  ? 'border-primary-600 text-primary-600'
-                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}
+                ${
+                  isActive
+                    ? "border-primary-600 text-primary-600"
+                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
+                }
               `}
               style={{
-                borderBottomColor: isActive ? themeConfig.colors.primary : 'transparent',
-                color: isActive ? themeConfig.colors.primary : themeConfig.colors.secondary
+                borderBottomColor: isActive
+                  ? themeConfig.colors.primary
+                  : "transparent",
+                color: isActive
+                  ? themeConfig.colors.primary
+                  : themeConfig.colors.secondary,
               }}
               onClick={() => goToPage(index)}
             >
               {tabTitle}
             </button>
           );
         })}
       </div>
 
       {/* Form */}
       <form onSubmit={handleSubmit} className="survey-form">
         <div className={themeConfig.card}>
           {/* Page header */}
           {pages[currentPage] && pages[currentPage][0]?.description && (
             <div className={themeConfig.header}>
-              <p className={themeConfig.description}>{pages[currentPage][0].description}</p>
+              <p className={themeConfig.description}>
+                {pages[currentPage][0].description}
+              </p>
             </div>
           )}
 
           {/* Page content */}
           <div className="survey-page-content space-y-6">
             {pages[currentPage]?.map((block, index) => (
               <BlockRenderer
                 key={block.uuid || `block-${index}`}
                 block={block}
                 value={block.fieldName ? values[block.fieldName] : undefined}
-                onChange={(value) => block.fieldName && setValue(block.fieldName, value)}
+                onChange={(value) =>
+                  block.fieldName && setValue(block.fieldName, value)
+                }
                 error={block.fieldName ? errors[block.fieldName] : undefined}
                 theme={theme}
               />
             ))}
           </div>
 
           {/* Navigation buttons */}
           <NavigationButtons
             onPrevious={!isFirstPage ? goToPreviousPage : undefined}
-            onNext={!isLastPage ? goToNextPage : undefined}
-            onSubmit={isLastPage ? submit : undefined}
+            onNext={!containsEndBlock && !isLastPage ? goToNextPage : undefined}
+            onSubmit={containsEndBlock || isLastPage ? submit : undefined}
             isValid={isValid}
             options={navigationButtons}
             submitText={submitText}
           />
         </div>
       </form>
     </div>
   );
 };
diff --git a/src/packages/survey-form-renderer/src/context/SurveyFormContext.tsx b/src/packages/survey-form-renderer/src/context/SurveyFormContext.tsx
index 0c42399cecdf386c84d965fb0465a615847bd01f..0164c19201b68a7be9cc55428ae19c9067b72081 100644
--- a/src/packages/survey-form-renderer/src/context/SurveyFormContext.tsx
+++ b/src/packages/survey-form-renderer/src/context/SurveyFormContext.tsx
@@ -1,52 +1,65 @@
 // Enhanced SurveyFormContext with Navigation History
-import React, { createContext, useContext, useState, useEffect, useCallback } from "react";
+import React, {
+  createContext,
+  useContext,
+  useState,
+  useEffect,
+  useCallback,
+} from "react";
 import type { ReactNode } from "react";
-import type { NodeData, BlockData } from "../../../survey-form-builder/src/types";
+import type {
+  NodeData,
+  BlockData,
+} from "../../../survey-form-builder/src/types";
 import type {
   SurveyFormContextProps,
   SurveyTheme,
   ComputedFieldsConfig,
   CustomValidator,
-  BranchingLogic
+  BranchingLogic,
 } from "../types";
-import { getSurveyPages, getSurveyPageIds, evaluateLogic } from "../utils/surveyUtils";
+import {
+  getSurveyPages,
+  getSurveyPageIds,
+  evaluateLogic,
+} from "../utils/surveyUtils";
 import {
   evaluateCondition,
   isBlockVisible,
   executeCalculation,
   getNextPageIndex as calculateNextPageIndex,
   getNextPageFromNavigationRules,
-  getNextStepFromNavigationRules
+  getNextStepFromNavigationRules,
 } from "../utils/conditionalUtils";
 
 // Navigation history entry
 interface NavigationHistoryEntry {
   pageIndex: number;
   blockIndex: number;
   timestamp: number;
-  trigger: 'forward' | 'back' | 'jump' | 'initial';
+  trigger: "forward" | "back" | "jump" | "initial";
 }
 
 // Enhanced context interface
 interface EnhancedSurveyFormContextProps extends SurveyFormContextProps {
   navigationHistory: NavigationHistoryEntry[];
   canGoBack: boolean;
   getActualProgress: () => number; // Returns percentage of actual progress
   getTotalVisibleSteps: () => number;
   getCurrentStepPosition: () => number;
 }
 
 // Create context with default values
 export const SurveyFormContext = createContext<EnhancedSurveyFormContextProps>({
   values: {},
   setValue: () => {},
   errors: {},
   setError: () => {},
   currentPage: 0,
   currentBlockIndex: 0,
   totalPages: 0,
   goToPage: () => {},
   goToNextPage: () => {},
   goToPreviousPage: () => {},
   goToNextBlock: () => {},
   goToPreviousBlock: () => {},
@@ -88,484 +101,530 @@ interface SurveyFormProviderProps {
   theme?: SurveyTheme;
   computedFields?: ComputedFieldsConfig;
   customValidators?: Record<string, CustomValidator>;
   debug?: boolean;
   enableDebug?: boolean;
 }
 
 // Provider component
 export const SurveyFormProvider: React.FC<SurveyFormProviderProps> = ({
   children,
   surveyData,
   defaultValues = {},
   onSubmit,
   onChange,
   onPageChange,
   language = "en",
   theme = "default",
   computedFields = {},
   customValidators = {},
   enableDebug = false,
   debug = false,
 }) => {
   // State for form values and errors
   const [values, setValues] = useState<Record<string, any>>(defaultValues);
   const [errors, setErrors] = useState<Record<string, string>>({});
-  const [conditionalErrors, setConditionalErrors] = useState<Record<string, string>>({});
+  const [conditionalErrors, setConditionalErrors] = useState<
+    Record<string, string>
+  >({});
   const [computedValues, setComputedValues] = useState<Record<string, any>>({});
   const [currentPage, setCurrentPage] = useState(0);
   const [currentBlockIndex, setCurrentBlockIndex] = useState(0);
   const [isSubmitting, setIsSubmitting] = useState(false);
   const [currentLanguage, setCurrentLanguage] = useState(language);
-  
+
   // Navigation history state
-  const [navigationHistory, setNavigationHistory] = useState<NavigationHistoryEntry[]>([
+  const [navigationHistory, setNavigationHistory] = useState<
+    NavigationHistoryEntry[]
+  >([
     {
       pageIndex: 0,
       blockIndex: 0,
       timestamp: Date.now(),
-      trigger: 'initial'
-    }
+      trigger: "initial",
+    },
   ]);
 
   // Get all pages from the survey
   const pages = getSurveyPages(surveyData.rootNode);
   const pageIds = getSurveyPageIds(surveyData.rootNode);
   const totalPages = Math.max(1, pages.length);
 
   // Navigation states
   const isFirstPage = currentPage === 0;
   const isLastPage = currentPage === totalPages - 1;
   const canGoBack = navigationHistory.length > 1;
 
   // Handle browser back/forward for mobile
   useEffect(() => {
     const handlePopState = (event: PopStateEvent) => {
       event.preventDefault();
-      
+
       // Check if we have navigation history to go back to
       if (canGoBack) {
         goToPreviousBlock();
       } else {
         // If no history, allow normal browser behavior
         // This will exit the app on mobile or go back in browser
         window.history.back();
       }
     };
 
     // Add state to browser history to intercept back button
-    window.history.pushState({ surveyPage: currentPage, surveyBlock: currentBlockIndex }, '');
-    
-    window.addEventListener('popstate', handlePopState);
-    
+    window.history.pushState(
+      { surveyPage: currentPage, surveyBlock: currentBlockIndex },
+      "",
+    );
+
+    window.addEventListener("popstate", handlePopState);
+
     return () => {
-      window.removeEventListener('popstate', handlePopState);
+      window.removeEventListener("popstate", handlePopState);
     };
   }, [currentPage, currentBlockIndex, canGoBack]);
 
   // Add navigation entry to history
-  const addToNavigationHistory = useCallback((
-    pageIndex: number, 
-    blockIndex: number, 
-    trigger: NavigationHistoryEntry['trigger']
-  ) => {
-    const newEntry: NavigationHistoryEntry = {
-      pageIndex,
-      blockIndex,
-      timestamp: Date.now(),
-      trigger
-    };
-    
-    setNavigationHistory(prev => {
-      // Avoid duplicate consecutive entries
-      const lastEntry = prev[prev.length - 1];
-      if (lastEntry && 
-          lastEntry.pageIndex === pageIndex && 
-          lastEntry.blockIndex === blockIndex) {
-        return prev;
-      }
-      
-      // Keep max 50 entries to prevent memory issues
-      const newHistory = [...prev, newEntry];
-      return newHistory.slice(-50);
-    });
-  }, []);
+  const addToNavigationHistory = useCallback(
+    (
+      pageIndex: number,
+      blockIndex: number,
+      trigger: NavigationHistoryEntry["trigger"],
+    ) => {
+      const newEntry: NavigationHistoryEntry = {
+        pageIndex,
+        blockIndex,
+        timestamp: Date.now(),
+        trigger,
+      };
+
+      setNavigationHistory((prev) => {
+        // Avoid duplicate consecutive entries
+        const lastEntry = prev[prev.length - 1];
+        if (
+          lastEntry &&
+          lastEntry.pageIndex === pageIndex &&
+          lastEntry.blockIndex === blockIndex
+        ) {
+          return prev;
+        }
+
+        // Keep max 50 entries to prevent memory issues
+        const newHistory = [...prev, newEntry];
+        return newHistory.slice(-50);
+      });
+    },
+    [],
+  );
 
   // Get visible blocks for current state
-  const getVisibleBlocks = useCallback((blocks: BlockData[]): BlockData[] => {
-    return blocks.filter(block => {
-      if (!block.visibleIf) return true;
-      return isBlockVisible(block, { ...values, ...computedValues });
-    });
-  }, [values, computedValues]);
+  const getVisibleBlocks = useCallback(
+    (blocks: BlockData[]): BlockData[] => {
+      return blocks.filter((block) => {
+        if (!block.visibleIf) return true;
+        return isBlockVisible(block, { ...values, ...computedValues });
+      });
+    },
+    [values, computedValues],
+  );
 
   // Calculate total visible steps across all pages
   const getTotalVisibleSteps = useCallback((): number => {
     return pages.reduce((total, pageBlocks) => {
       const visibleBlocks = getVisibleBlocks(pageBlocks);
       return total + visibleBlocks.length;
     }, 0);
   }, [pages, getVisibleBlocks]);
 
   // Get current step position (0-based index of current step across all visible steps)
   const getCurrentStepPosition = useCallback((): number => {
     let position = 0;
-    
+
     // Count visible steps in previous pages
     for (let i = 0; i < currentPage; i++) {
       const visibleBlocks = getVisibleBlocks(pages[i] || []);
       position += visibleBlocks.length;
     }
-    
+
     // Add current block index within current page (only counting visible blocks)
     const currentPageBlocks = pages[currentPage] || [];
     const visibleCurrentPageBlocks = getVisibleBlocks(currentPageBlocks);
     const currentBlockInVisibleBlocks = visibleCurrentPageBlocks.findIndex(
       (block, index) => {
         // Find the actual index of current block in visible blocks
-        const actualIndex = currentPageBlocks.findIndex(b => b.uuid === block.uuid);
+        const actualIndex = currentPageBlocks.findIndex(
+          (b) => b.uuid === block.uuid,
+        );
         return actualIndex === currentBlockIndex;
-      }
+      },
     );
-    
+
     if (currentBlockInVisibleBlocks >= 0) {
       position += currentBlockInVisibleBlocks;
     }
-    
+
     return position;
   }, [currentPage, currentBlockIndex, pages, getVisibleBlocks]);
 
   // Get actual progress percentage based on visible steps completed
   const getActualProgress = useCallback((): number => {
     const totalSteps = getTotalVisibleSteps();
     const currentPosition = getCurrentStepPosition();
-    
+
     if (totalSteps === 0) return 0;
-    
+
     // Add 1 to current position because we're calculating completion of current step
     return Math.min(100, ((currentPosition + 1) / totalSteps) * 100);
   }, [getTotalVisibleSteps, getCurrentStepPosition]);
 
   // Rest of the existing context logic (setValue, setError, etc.)
   const updateComputedValues = useCallback(() => {
     if (Object.keys(computedFields).length === 0) return;
 
     const newComputedValues: Record<string, any> = {};
 
     Object.entries(computedFields).forEach(([fieldName, config]) => {
       const result = executeCalculation(
         {
           formula: config.formula,
           targetField: fieldName,
-          dependencies: config.dependencies
+          dependencies: config.dependencies,
         },
-        { ...values, ...computedValues }
+        { ...values, ...computedValues },
       );
 
-      newComputedValues[fieldName] = config.format ? config.format(result) : result;
+      newComputedValues[fieldName] = config.format
+        ? config.format(result)
+        : result;
     });
 
-    setComputedValues(prev => ({ ...prev, ...newComputedValues }));
+    setComputedValues((prev) => ({ ...prev, ...newComputedValues }));
   }, [values, computedValues, computedFields]);
 
   useEffect(() => {
     updateComputedValues();
   }, [values, updateComputedValues]);
 
-  const evaluateConditionWithContext = useCallback((condition: string, contextData?: Record<string, any>) => {
-    const contextValues = {
-      ...values,
-      ...computedValues,
-      ...(contextData || {})
-    };
-
-    return evaluateCondition(condition, contextValues);
-  }, [values, computedValues]);
+  const evaluateConditionWithContext = useCallback(
+    (condition: string, contextData?: Record<string, any>) => {
+      const contextValues = {
+        ...values,
+        ...computedValues,
+        ...(contextData || {}),
+      };
+
+      return evaluateCondition(condition, contextValues);
+    },
+    [values, computedValues],
+  );
 
   const getNextPageIndex = useCallback((): number | null => {
     const currentPageBlocks = pages[currentPage] || [];
     let branchingLogic: BranchingLogic | undefined;
 
     if (currentPageBlocks.length > 0) {
       const firstBlock = currentPageBlocks[0];
-      if (typeof firstBlock === 'object' && firstBlock.branchingLogic) {
+      if (typeof firstBlock === "object" && firstBlock.branchingLogic) {
         branchingLogic = firstBlock.branchingLogic;
       }
     }
 
     if (!branchingLogic) {
       const page = pages[currentPage];
       if (Array.isArray(page) && page.length > 0) {
         const setParent = page[0];
-        if (typeof setParent === 'object' && setParent.branchingLogic) {
+        if (typeof setParent === "object" && setParent.branchingLogic) {
           branchingLogic = setParent.branchingLogic;
         }
       }
     }
 
     if (branchingLogic) {
       const nextIndex = calculateNextPageIndex(
         currentPage,
         branchingLogic,
         { ...values, ...computedValues },
-        totalPages
+        totalPages,
       );
 
       if (nextIndex === -1) {
         return null;
       }
 
       return nextIndex;
     }
 
     const navIndex = getNextPageFromNavigationRules(
       currentPageBlocks,
       pages,
       pageIds,
-      { ...values, ...computedValues }
+      { ...values, ...computedValues },
     );
     if (navIndex !== null) {
       return navIndex === -1 ? null : navIndex;
     }
 
     return currentPage + 1 < totalPages ? currentPage + 1 : null;
   }, [currentPage, pages, totalPages, values, computedValues]);
 
-  const validateField = useCallback((fieldName: string, value: any): string | null => {
-    const validator = customValidators[fieldName];
-    if (!validator) return null;
+  const validateField = useCallback(
+    (fieldName: string, value: any): string | null => {
+      const validator = customValidators[fieldName];
+      if (!validator) return null;
 
-    try {
-      const error = validator.validate(value, { ...values, ...computedValues });
-      return error;
-    } catch (error) {
-      console.error(`Error validating field ${fieldName}:`, error);
-      return `Validation error: ${(error as Error).message}`;
-    }
-  }, [customValidators, values, computedValues]);
+      try {
+        const error = validator.validate(value, {
+          ...values,
+          ...computedValues,
+        });
+        return error;
+      } catch (error) {
+        console.error(`Error validating field ${fieldName}:`, error);
+        return `Validation error: ${(error as Error).message}`;
+      }
+    },
+    [customValidators, values, computedValues],
+  );
 
   // Calculate if the current page is valid
   const currentPageBlocks = pages[currentPage] || [];
   const visibleCurrentPageBlocks = getVisibleBlocks(currentPageBlocks);
   const currentPageFields = visibleCurrentPageBlocks
-    .filter(block => block.fieldName)
-    .map(block => block.fieldName as string);
+    .filter((block) => block.fieldName)
+    .map((block) => block.fieldName as string);
 
-  const isValid = currentPageFields.every(field => !errors[field] && !conditionalErrors[field]);
+  const isValid = currentPageFields.every(
+    (field) => !errors[field] && !conditionalErrors[field],
+  );
 
   // Enhanced setValue with navigation history
   const setValue = (field: string, value: any) => {
-    setValues(prev => {
+    setValues((prev) => {
       const updatedValues = { ...prev, [field]: value };
 
       // Existing validation logic...
       const currentPageItem = pages[currentPage];
       if (Array.isArray(currentPageItem) && currentPageItem.length > 0) {
         const setParent = currentPageItem[0];
-        if (typeof setParent === 'object' && setParent.exitLogic) {
+        if (typeof setParent === "object" && setParent.exitLogic) {
           try {
             const result = evaluateLogic(setParent.exitLogic, {
               fieldValues: updatedValues,
-              getFieldValue: (name) => updatedValues[name] || computedValues[name]
+              getFieldValue: (name) =>
+                updatedValues[name] || computedValues[name],
             });
-            if (result && typeof result === 'object' && isValid === false) {
-              setError(field, result.errorMessage || 'Invalid value');
+            if (result && typeof result === "object" && isValid === false) {
+              setError(field, result.errorMessage || "Invalid value");
             } else {
               setError(field, null);
             }
           } catch (error) {
             console.error("Error evaluating exit logic:", error);
           }
         }
       }
 
       const validationError = validateField(field, value);
       if (validationError) {
-        setConditionalErrors(prev => ({ ...prev, [field]: validationError }));
+        setConditionalErrors((prev) => ({ ...prev, [field]: validationError }));
       } else {
-        setConditionalErrors(prev => {
+        setConditionalErrors((prev) => {
           const newErrors = { ...prev };
           delete newErrors[field];
           return newErrors;
         });
       }
 
       if (onChange) {
         onChange(updatedValues);
       }
 
       return updatedValues;
     });
   };
 
   const setError = (field: string, error: string | null) => {
-    setErrors(prev => {
+    setErrors((prev) => {
       if (error === null) {
         const newErrors = { ...prev };
         delete newErrors[field];
         return newErrors;
       }
       return { ...prev, [field]: error };
     });
   };
 
   // Enhanced navigation functions
   const goToPage = (pageIndex: number) => {
     if (pageIndex >= 0 && pageIndex < totalPages) {
       // Add to navigation history
-      addToNavigationHistory(pageIndex, 0, 'jump');
-      
+      addToNavigationHistory(pageIndex, 0, "jump");
+
       setCurrentPage(pageIndex);
       setCurrentBlockIndex(0);
 
       // Update browser history
-      window.history.pushState({ surveyPage: pageIndex, surveyBlock: 0 }, '');
+      window.history.pushState({ surveyPage: pageIndex, surveyBlock: 0 }, "");
 
       if (onPageChange) {
         onPageChange(pageIndex, totalPages);
       }
     }
   };
 
   const goToNextBlock = () => {
     const pageBlocks = pages[currentPage] || [];
     const currentBlock = pageBlocks[currentBlockIndex];
 
+    if (currentBlock?.isEndBlock) {
+      submit();
+      return;
+    }
+
     const target = getNextStepFromNavigationRules(
       currentBlock,
       pages,
       pageIds,
-      { ...values, ...computedValues }
+      { ...values, ...computedValues },
     );
 
-    if (target === 'submit') {
+    if (target === "submit") {
       submit();
       return;
     }
 
     if (target) {
       // Add to navigation history
-      addToNavigationHistory(target.pageIndex, target.blockIndex, 'forward');
-      
+      addToNavigationHistory(target.pageIndex, target.blockIndex, "forward");
+
       setCurrentPage(target.pageIndex);
       setCurrentBlockIndex(target.blockIndex);
-      
+
       // Update browser history
-      window.history.pushState({ surveyPage: target.pageIndex, surveyBlock: target.blockIndex }, '');
-      
+      window.history.pushState(
+        { surveyPage: target.pageIndex, surveyBlock: target.blockIndex },
+        "",
+      );
+
       if (onPageChange) {
         onPageChange(target.pageIndex, totalPages);
       }
       return;
     }
 
     if (currentBlockIndex < pageBlocks.length - 1) {
       const newBlockIndex = currentBlockIndex + 1;
-      addToNavigationHistory(currentPage, newBlockIndex, 'forward');
+      addToNavigationHistory(currentPage, newBlockIndex, "forward");
       setCurrentBlockIndex(newBlockIndex);
-      
+
       // Update browser history
-      window.history.pushState({ surveyPage: currentPage, surveyBlock: newBlockIndex }, '');
+      window.history.pushState(
+        { surveyPage: currentPage, surveyBlock: newBlockIndex },
+        "",
+      );
       return;
     }
 
     const nextIndex = getNextPageIndex();
     if (nextIndex === null) {
       submit();
     } else {
-      addToNavigationHistory(nextIndex, 0, 'forward');
+      addToNavigationHistory(nextIndex, 0, "forward");
       goToPage(nextIndex);
     }
   };
 
   // Enhanced goToPreviousBlock using navigation history
   const goToPreviousBlock = () => {
     if (navigationHistory.length <= 1) {
       return; // No history to go back to
     }
 
     // Remove current entry and get previous entry
     const newHistory = [...navigationHistory];
     newHistory.pop(); // Remove current position
     const previousEntry = newHistory[newHistory.length - 1];
 
     if (previousEntry) {
       setNavigationHistory(newHistory);
       setCurrentPage(previousEntry.pageIndex);
       setCurrentBlockIndex(previousEntry.blockIndex);
 
       // Update browser history
-      window.history.pushState({ 
-        surveyPage: previousEntry.pageIndex, 
-        surveyBlock: previousEntry.blockIndex 
-      }, '');
+      window.history.pushState(
+        {
+          surveyPage: previousEntry.pageIndex,
+          surveyBlock: previousEntry.blockIndex,
+        },
+        "",
+      );
 
       if (onPageChange) {
         onPageChange(previousEntry.pageIndex, totalPages);
       }
     }
   };
 
   const goToNextPage = () => {
     goToNextBlock();
   };
 
   const goToPreviousPage = () => {
     goToPreviousBlock();
   };
 
   // Enhanced submit function
   const submit = async () => {
     setIsSubmitting(true);
 
     updateComputedValues();
 
     let hasErrors = false;
-    const allFields = pages.flat()
-      .filter(block => block.fieldName)
-      .map(block => block.fieldName as string);
+    const allFields = pages
+      .flat()
+      .filter((block) => block.fieldName)
+      .map((block) => block.fieldName as string);
 
     const newErrors: Record<string, string> = {};
     const newConditionalErrors: Record<string, string> = {};
 
-    allFields.forEach(field => {
+    allFields.forEach((field) => {
       const value = values[field];
       const validationError = validateField(field, value);
       if (validationError) {
         newConditionalErrors[field] = validationError;
         hasErrors = true;
       }
     });
 
     setConditionalErrors(newConditionalErrors);
 
     if (!hasErrors && Object.keys(errors).length === 0) {
       if (onSubmit) {
         try {
           const submissionData = {
             ...values,
-            ...computedValues
+            ...computedValues,
           };
           await onSubmit(submissionData);
         } catch (error) {
           console.error("Error during form submission:", error);
         }
       }
     }
 
     setIsSubmitting(false);
   };
 
   return (
     <SurveyFormContext.Provider
       value={{
         values,
         setValue,
         errors,
         setError,
         currentPage,
         currentBlockIndex,
         totalPages,
         goToPage,
         goToNextPage,
         goToPreviousPage,
         goToNextBlock,
@@ -578,26 +637,26 @@ export const SurveyFormProvider: React.FC<SurveyFormProviderProps> = ({
         language: currentLanguage,
         setLanguage: setCurrentLanguage,
         theme,
         surveyData,
         conditionalErrors,
         computedValues,
         updateComputedValues,
         evaluateCondition: evaluateConditionWithContext,
         getNextPageIndex,
         getVisibleBlocks,
         validateField,
         // Enhanced navigation properties
         navigationHistory,
         canGoBack,
         getActualProgress,
         getTotalVisibleSteps,
         getCurrentStepPosition,
       }}
     >
       {children}
     </SurveyFormContext.Provider>
   );
 };
 
 // Hook to use the survey form context
-export const useSurveyForm = () => useContext(SurveyFormContext);
\ No newline at end of file
+export const useSurveyForm = () => useContext(SurveyFormContext);
